#!/bin/bash

# align

# Accepts lines of text from standard input,
# treating each word as a field value, like the program `sort' does.
# Reads all lines of text to determine the max width of each column of text.
# Outputs the text aligned in columns to standard output.

##############################################################################
# Setup Debugging
##############################################################################

debug=on

case $debug in
	off)	exec 9>/dev/null ;;
	*)	exec 9>&1 ;;
esac

##############################################################################
# Define how many words are required on a line for it to be aligned
##############################################################################

NUM_COLUMNS_MIN=2

##############################################################################
# Double-delimiter separator
##############################################################################

double_delimiter_separator=nil

##############################################################################
# Define test to determine integer
##############################################################################

regexp='^[0-9]*$'

##############################################################################
# Define temporary files
##############################################################################

tempdir=~/tmp
src=$tempdir/align_me
dst=$tempdir/aligned

##############################################################################
# Set up temporary files
##############################################################################

rm -f "$src" &>/dev/null
rm -f "$dst" &>/dev/null

##############################################################################
# Pad a column with spaces
##############################################################################

function makepad
{
	(( PADDING = $1 - $2 ))
	case "$PADDING" in
	0)	PAD=" " ;;
	1)	PAD="  " ;;
	2)	PAD="   " ;;
	3)	PAD="    " ;;
	4)	PAD="     " ;;
	5)	PAD="      " ;;
	6)	PAD="       " ;;
	7)	PAD="        " ;;
	8)	PAD="         " ;;
	9)	PAD="          " ;;
	10)	PAD="           " ;;
	11)	PAD="            " ;;
	12)	PAD="             " ;;
	13)	PAD="              " ;;
	14)	PAD="               " ;;
	15)	PAD="                " ;;
	16)	PAD="                 " ;;
	17)	PAD="                  " ;;
	18)	PAD="                   " ;;
	19)	PAD="                    " ;;
	20)	PAD="                     " ;;
	21)	PAD="                      " ;;
	22)	PAD="                       " ;;
	23)	PAD="                        " ;;
	24)	PAD="                         " ;;
	25)	PAD="                          " ;;
	26)	PAD="                           " ;;
	27)	PAD="                            " ;;
	28)	PAD="                             " ;;
	29)	PAD="                              " ;;
	30)	PAD="                               " ;;
	*)	PAD="                                " ;;
	esac
	echo "$PAD"
}

##############################################################################
# Check a parameter value and assign a default if the parameter is null.
##############################################################################

# If a function is called with an explicit null as a parameter
# it is available and will be equal to null.

function check {

	if [ "x$1" = "x" ] ; then
		echo "$2"
	else
		echo "$1"
	fi
}

##############################################################################
# Define column separator char from $1
##############################################################################

column_separator_default=' '
COLUMN_SEPARATOR="$column_separator_default"
	echo column_separator_default="${column_separator_default}"\< >&9
	echo 'check: $1='"$1"\< >&9
	echo cs="${cs}"\< >&9
cs="$column_separator_default"
	echo cs="${cs}"\< >&9
cs=$(check "$1" "$column_separator_default")
	echo cs="${cs}"\< >&9

##############################################################################
# Define column pad char from $2
##############################################################################

pad_default=' '
COLUMN_PAD="$pad_default"
	echo 'check: $2='"$2"\< >&9
	echo pd="${pd}"\< >&9
pd="$pad_default"
	echo pd="${pd}"\< >&9
pd=$(check "$2" "$pad_default")
	echo pd="${pd}"\< >&9

##############################################################################
# Initialize Counters
##############################################################################

NUM_COLUMNS=0
NUM_COLUMNS_MAX=0
NUM_RECORDS=0
COLUMN_WIDTH=0

##############################################################################
# Setup input field delimeter
##############################################################################

remove=' '
insert=' '
search=' '
replace=' '

case "$3" in
	':')
		remove=' '
		insert='_'
		search=':'
		replace=' ' ;;
	'')
		remove=' '
		insert=' '
		search=' '
		replace=' ' ;;
	*)
		remove=' '
		insert='_'
		search="$3"
		replace=' ' ;;
esac

sed_command0=s/\\$search\\$search/\\$search$double_delimiter_separator\\$search/g
sed_command1=s/\\$remove/\\$insert/g
sed_command2=s/\\$search/\\$replace/g

echo sed_command0="$sed_command0" >&9
echo sed_command1="$sed_command1" >&9
echo sed_command2="$sed_command2" >&9

##############################################################################
# Debugging
##############################################################################

echo 'check: cs='\>$cs\< >&9
echo 'check: pd='\>$pd\< >&9
echo 'check: PAD='\>$PAD\< >&9
echo remove=$remove\<$insert\< search="$search"\<"$replace"\< >&9

##############################################################################
# Copy standard input to a temporary file.
##############################################################################

exec 7>/tmp/align_input
while read input_line ; do
	echo "$input_line"
done >&7
exec 7>&-
echo From standard input: >&9
cat /tmp/align_input >&9

##############################################################################
# If a different delimeter is specified then
# replace all spaces with _ and
# replace the delimiter with spaces so we can use the read function unmodified
##############################################################################

exec 6</tmp/align_input
exec 7>/tmp/align_me
case "$3" in
	'')
		while read input_line ; do
			echo "$input_line"
		done ;;
	':')
		while read input_line ; do
			echo "a.""$input_line" >&9
			echo "b.""$input_line" | sed 's/\:\:/\:nil\:/g' >&9
			echo "$input_line" \
			| sed 	"$sed_command0" \
			| sed 	"$sed_command1" \
			| sed 	"$sed_command2"
		done ;;
	*)
		while read input_line ; do
			echo "1.""$input_line" >&9
			echo "2.""$input_line" \
			| sed 	'
					$sed_command0
				' \
			| sed 	'
					$sed_command1
				' \
			| sed 	'
					$sed_command2
				'
		done ;;
esac <&6 >&7
exec 6<&-
exec 7>&-
echo Delimiter checked: >&9
cat /tmp/align_me >&9

##############################################################################
# Determine column widths
##############################################################################

exec 6</tmp/align_me
while read -a WORDS ; do
	(( NUM_RECORDS++ ))
	NUM_COLUMNS=${#WORDS[*]}
	if [ $NUM_COLUMNS -gt $NUM_COLUMNS_MAX ] ; then
		NUM_COLUMNS_MAX=$NUM_COLUMNS ; fi
		if [ $NUM_COLUMNS -gt $NUM_COLUMNS_MIN ] ; then
		for (( i = 0 ; i <= $NUM_COLUMNS - 1 ; i++ )) ; do
			COLUMN_WIDTH=${#WORDS[$i]}
			if [ $COLUMN_WIDTH -gt "0${COLUMN_WIDTH_MAX[$i]}" ] ; then
				COLUMN_WIDTH_MAX[$i]=$COLUMN_WIDTH ; fi
		done
	fi
done <&6
exec 6<&-

##############################################################################
# Write text with columns aligned.
##############################################################################

exec 6</tmp/align_me
exec 7>/tmp/aligned
while read -a WORDS ; do
	NUM_WORDS=${#WORDS[*]}
	for (( i = 0 ; i <= $NUM_WORDS - 1 ; i++ )) ; do
		WORD=${WORDS[$i]}
		WORDLEN=${#WORD}
		check_phrase=`echo $WORD | sed "s/\($regexp\)//"`
		if [ -z "${check_phrase}" ] ; then
			LENGTH=${COLUMN_WIDTH_MAX[$i]}
			(( PADDING = $LENGTH - $WORDLEN ))
			for (( p = 0 ; p < $PADDING ; p++ )) ; do
				echo -n ' ' >&7
			done
			echo -n "$WORD" >&7
			echo -n \>"$(makepad $LENGTH $WORDLEN)"$WORD"$cp" >&9
		else
			echo -n "$WORD" >&7
			LENGTH=${COLUMN_WIDTH_MAX[$i]}
			(( PADDING = $LENGTH - $WORDLEN ))
			for (( p = 0 ; p < $PADDING ; p++ )) ; do
				echo -n ' ' >&7
			done
			echo -n \>$WORD"$(makepad $LENGTH $WORDLEN)""$cp" >&9
		fi
		echo -n "$COLUMN_SEPARATOR" >&7
	done
	echo >&7
	echo >&9
	echo -n "." >&1
done <&6
echo Aligned: >&9
cat /tmp/aligned
