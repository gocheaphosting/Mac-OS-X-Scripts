#!/bin/bash

dateformat="%Y%m%d_%H%M%S"

function flag2 {

	if [ "x$datef2" = "x" ] ; then
		fl2='x' # blank
	elif [ "x$datef2" = "x$datef" ] ; then
		fl2='=' # equal to best date. then clear date to rid the clutter.
		datef2=
	elif [[ "x$datef2" < "x$datef" ]] ; then
		fl2='2' # should never be earlier than DateTimeOriginal.
		subj='C'
	else
		fl2='^' # means this date is later than best date.
	fi
}

function flag3 {

	if [ "x$datef3" = "x" ] ; then
		fl3='x'
	elif [ "x$datef3" = "x$datef" ] ; then
		fl3='='
		datef3=
	elif [[ "x$datef3" < "x$datef" ]] ; then
		fl3='3'
		subj='M'
	else
		fl3='^'
	fi
}

function flag4 {

	if [ "x$datef4" = "x" ] ; then
		fl4='x'
	elif [ "x$datef4" = "x$datef" ] ; then
		fl4='='
		datef4=
	elif [[ "x$datef4" < "x$datef" ]] ; then
		fl4='4'
		subj='D' # means file date is earlier than EXIF modified date?
	else
		fl4='^'
	fi
}

function flag5 {

	if [ "x$datef5" = "x" ] ; then
		fl5='x'
	elif [ "x$datef5" = "x$datef" ] ; then
		fl5='='
		datef5=
	elif [[ "x$datef5" < "x$datef" ]] ; then
		fl5='5'
		subj='N' # means file date is earlier than EXIF modified date?
	else
		fl5='^'
	fi
}

case "$1" in

	"-h"|"--help"|"")

		echo "Missing a filename. Program returns the earliest date found and the flags string." >&2

		exit '1'

		;;

	*)

		file="$1"

		;;

esac

#############################################################################
# Get EXIF dates.
#############################################################################

line=$(get-dates "$file")

a=($line)

datef1="${a[0]:1}"
datef2="${a[1]:1}"
datef3="${a[2]:1}"
datef4="${a[3]:1}"
   cam="${a[4]:1}"

#############################################################################
# Get dates from filename.
#############################################################################

line=$(get-dates-from-filename "$file")
echo "get-exif-dates:    line=$line" >&2
a=($line)
echo "get-exif-dates:    a[0]=${a[0]}" >&2
echo "get-exif-dates:    a[1]=${a[1]}" >&2
echo "get-exif-dates:    a[2]=${a[2]}" >&2
echo "get-exif-dates:    a[3]=${a[3]}" >&2
echo "get-exif-dates:    a[4]=${a[4]}" >&2
datef5=$(date -d "${a[0]} ${a[1]}" +"$dateformat")
echo "get-exif-dates:  datef5=$datef5" >&2
newname=$(echo "$line" | sed 's/^[^ ]* *[^ ]* *\(.*\)/\1/')
echo "get-exif-dates: newname=$newname" >&2
#############################################################################
# Compare to exif dates.
#############################################################################

if [ "x$datef1" = "x" ] ; then
	fl1='x'
	if [ "x$datef2" = "x" ] ; then
		fl2='x'
		if [ "x$datef3" = "x" ] ; then
			fl3='x'
			if [ "x$datef5" = "x" ] ; then
				datef="$datef4" # take filedate if no exif dates and no dates in filename.
				fl5='x'
				fl4='4'
				subj='f' # means we used the file date.
			else
				if [[ "x$datef5" < "x$datef4" ]] ; then
					datef="$datef5"
					fl5='5'
					fl4='^'
					subj='n' # means we used a date from the filename.
				else
					datef="$datef4"
					fl5='^'
					fl4='4'
					subj='f'
				fi
			fi
		else
			datef="$datef3"
			fl3='3'
			flag4
			flag5
			subj='m'
		fi
	else
		datef="$datef2"
		fl2='2'
		flag3
		flag4
		flag5
		subj='c'
	fi
else
	datef="$datef1"
	fl1='1'
	flag2
	flag3
	flag4
	flag5
	subj='o'
fi

#############################################################################
# Return Flags.
#############################################################################
echo "get-exif-dates: datef1=$datef1" >&2
echo "get-exif-dates: datef2=$datef2" >&2
echo "get-exif-dates: datef3=$datef3" >&2
echo "get-exif-dates: datef4=$datef4" >&2
echo "get-exif-dates: datef5=$datef5" >&2
echo "get-exif-dates:  datef=$datef" >&2

echo "$datef" "$fl1$fl2$fl3$fl4$fl5$subj" "$cam" "$newname"
