#!/bin/bash

. "${HOME}/bin/general_header"
. "${bin}/m.setup_charcodes"
. "${bin}/m._process_headers"

# rb.delete
# rb.main
# rb.reset
# rb.get_charset
# rb.get_charcode
# rb.parse
# detect_boundary

alert_type=short

inmsg_suffix="$1"
[[ $inmsg_suffix ]] || inmsg_suffix=m
outpart_suffix=u
outmsg_suffix=n
while [ $outmsg_suffix = $inmsg_suffix ] ; do
	(( x++ ))
	outmsg_suffix=n$x
done

log="${myname}.log"

LineNumColour="$White"
LineColour="$BrightBlack"
IDColour="$Yellow"

wname=15								# width of name column in mail output file.
woutput=30

declare -A charcodea chardesc charcodec

output=
continue=
state=
messagecount=
f=
linecount=
section=
name=
value=
charset=
description=
thisfile=

quot=\"

function test_conv {
	local colour="$1"
	local ind="$2"
	local frm="$3"
	local to="$4"
	#rm "${output}$outpart_suffix" 2>/dev/null
	#echo -en "$ColourOn${!colour}m${ind}${c0}"
	iconv  -f "$frm" -t "$to" "$output" > "${output}as.${frm}," 2>"$log"
	error="$?"
	if [ $error = 0 ] ; then
		case "$frm" in
		'utf-8'|'utf8')
			mv -f "$output" "${output}$outpart_suffix"
			#rm "${output}as.${frm},"
		;;
		*)
			mv -f "${output}as.${frm}," "${output}$outpart_suffix"
			#rm "$output"
		;;
		esac
	else
		echo "Conversion Failure: output=$output file=$f from $frm to $to" >&9
	fi
}

function rb.open_section {
	(( section++ ))
	mon=( "${filecount}-$section" "$content" "$charset" )
	output="${filecount}-${section}."
	exec 7>"$output"
	echo -en "${csub2} $section$c0"
	#echo -e "Mailfile: _$filecount _$section _$content _$charset _$description _$f" >&7
	#printf "%8s %-2s %-20s %-20s %-20s %s\n" "$filecount" "$section" "$content" "$charset" "$description" "$f" >&8
}

function conversion_panic {

	echo -e "$ColourOn${BrightRed}m CONVERSION FAILURE.${c0}" >&2	# See if it is windows-1252.
	echo >&2
	echo "output=$output file=$f from $frm to $to" >&2
	echo >&2
	cat "$f" >&2
	echo >&2
	echo "Conversion Failure : output=$output file=$f from $frm to $to" >&9

}

function rb.close_section {

	exec 7>&-

	if [[ "$output" ]] ; then	# Don't try to close a section if none was open.

		case "$charcode" in

		"utf8"|"utf-8")
			test_conv BrightGreen "$outpart_suffix" utf-8 windows-1252
			if ! [ -e "${output}$outpart_suffix" ] ; then
				test_conv BrightRed "" windows-1252 utf-8	# See if it is windows-1252.
				if ! [ -e "${output}$outpart_suffix" ] ; then
					conversion_panic
				fi
			fi
		;;

		""|"unknown"|"1200")
			test_conv Magenta '-' windows-1252 utf-8	# See if it is windows-1252.
			if ! [ -e "${output}$outpart_suffix" ] ; then
				test_conv BrightRed "" utf-8 windows-1252	# See if it is utf-8.
				if ! [ -e "${output}$outpart_suffix" ] ; then
					conversion_panic
				fi
			fi
		;;

		*)
			test_conv Brown '>' "$charset" utf-8
			if ! [ -e "${output}$outpart_suffix" ] ; then
				test_conv BrightRed "" windows-1252 utf-8	# See if it is windows-1252.
				if ! [ -e "${output}$outpart_suffix" ] ; then
					conversion_panic
				fi
			fi
		;;

		esac

	fi

}

function rb.new_section {

	rb.close_section

	rb.get_charset				# First try for charset.
	rb.get_charcode				# Get charcode and description from first try.

	rb.open_section

}

function rb.write_messageline {
	echo "$linein" >&7
	#echo "$linein" >&2
}

function rb.process_line {

	value="$linein"
	rb.parse ':'

	case "${name,,*}" in

	'content-type')

		rb.parse ';'
		content=$(echo "$name" | tr '/;' '__')

		case "$content" in

		'text_plain'|'text_calendar')
			rb.new_section
		;;

		'application_octet-stream'|'text_html')
			continue=
		;;

		#*) #'multipart_mixed'|'multipart_alternative'|'multipart_report'|'message_rfc822')
		#;;

		esac

		mon=( "${filecount}-$section" "$content" "$charset" )

	;;

	#'<'*) # html or sgml code.
	#	continue=
	#;;
	begin)
		rb.new_section
	;;
	*'----'*'original message'*'----')
		rb.new_section
	;;
	*)
		detect_boundary
	;;

	esac
}

function read_file {

	rb.reset
	mon=( "${filecount}-$section" "$content" "$charset" )
	count=-1
	#progress
	#echo >&2
	#echo -en "${cfile}$f $c0" >&2
	rb.open_section
	#printf "$ColourOn${Brown}m%-8s $ColourOn${Green}m%-22s $ColourOn${Cyan}m%-15s${c0}\n" "${mon[@]}"

	while read linein ; do

		if [[ $continue ]] ; then			# Provides break for mbox boundaries, binary content and html content.
			[[ $linein ]] && rb.process_line
		else
			break					# Use this when reading individual messages.
		fi

	done

	rb.close_section					# Close off the main e-mail file.

	cat "${filecount}-1.$outpart_suffix" "${filecount}-2.$outpart_suffix" | grep -Ev "(^[[:space:]]*$)" > "${filecount}-1a.$outpart_suffix"
	rm  "${filecount}-1.$outpart_suffix"
	rm  "${filecount}-2.$outpart_suffix"
	mv -f "${filecount}-1a.$outpart_suffix" "${filecount}-1.$outpart_suffix"
	cat "${filecount}-"*".$outpart_suffix" | grep -Ev "(^[[:space:]]*$)" > "${filecount}.$outmsg_suffix"
}

exec 9>conversion_failures

#rb.delete

rb.main

m.getheaders u
