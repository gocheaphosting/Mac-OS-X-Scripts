#!/bin/bash

# UNIVERSAL CONSTANTS

countmax=4294967295 # note: range for Octet counter is 0 to 4294967295

# LOCAL CONSTANTS

interval_default=1
COUNT_DEFAULT=5

# GLOBALS AND INIT

date_s=
date_h=
inval=
outval=
intotal=0
outotal=0
total=0
counter=0
lines=
oldin=0
oldout=0
billdate=0
billdate_h=0
lastmonth=1
lastmonth_yr=2011
last_date=
rollovers_in=0
rollovers_out=0

# REPORT DESIGN

report_format="%-19s %10s %10s %s\n"
report_format1="%19s %10s %10s %10s %10s %10s MB in %10s MB out    %s\n"
report_format2="%-19s %10s %10s\n"
report_format3="%-19s %10s %10s %10s %10s\n"
report_format4="%-19s %10s %10s %10s %10s %8s %8s %8s %8s %8s"
report_format7="%-19s %8s %8s"
report_format5="$report_format4\n" # continuous scrolling
report_format6="$report_format4\r" # non-scrolling
report_format7n="$report_format7\n"
report_format7r="$report_format7\r"
 report_format4="$report_format4\n"

# CONFIGURATION AND INIT

billing_day=15
dir="$HOME"
logname="internet_usage_log"
report="$dir/$logname"
lastreport="${report}.last"
tail -n 1 "$report" > "$lastreport"
router="192.168.1.1"
interface=2
inmib="IF-MIB::ifInOctets.$interface"
outmib="IF-MIB::ifOutOctets.$interface"
#COUNT=$COUNT_DEFAULT
COUNT=1
#interval=$interval_default
interval=1
use_format=1

exec 6<"$report"

# FUNCTIONS

function read_line {

	OIFS="$IFS"
	IFS=$'\n'
	set -f    # disable file name generation (globbing)
	lines=( $(< "$lastreport" ) )
	set +f
	IFS="$OIFS"
	printf "%s\n" "${lines[@]}" | nl

}

function header {
	case $use_format in
	1)
		printf "$report_format1" Date InCounter OutCounter "Epoch Seconds"
		printf "$report_format1" "-------------------" "----------" "----------" "-------------"
		;;
	2)
		printf "$report_format2" Date InCounter OutCounter In Out
		printf "$report_format2" "-------------------" "----------" "----------"
		;;
	3)
		printf "$report_format3" Date InCounter OutCounter In Out Mb/s kb/s
		printf "$report_format3" "-------------------" "----------" "----------" "----------" "----------"
		;;
	4)
		printf "$report_format4" Date InCounter OutCounter In Out Mb/s kb/s "In MB" "Out kB" "Total MB"
		printf "$report_format4" "-------------------" "----------" "----------" "----------" "----------" "--------" "--------" "--------" "--------" "--------"
		;;
	5)
		printf "$report_format4" Date InCounter OutCounter In Out Mb/s kb/s "In MB" "Out kB" "Total MB"
		printf "$report_format4" "-------------------" "----------" "----------" "----------" "----------" "--------" "--------" "--------" "--------" "--------"
		;;
	6)
		printf "$report_format4" Date InCounter OutCounter In Out Mb/s kb/s "In MB" "Out kB" "Total MB"
		printf "$report_format4" "-------------------" "----------" "----------" "----------" "----------" "--------" "--------" "--------" "--------" "--------"
		;;
	7)
		printf "$report_format7n" Date "In Mb/s" "Out kb/s"
		printf "$report_format7n" "-------------------" "--------" "--------"
		;;
	esac
}

function read_counters {
	# Since precision of date command below is only 1 second
	# this results in a very imprecise calculation of the
	# instantaneous throughput rate. The long term bandwith usage
	# calculation will be OK.

	date_s=$(date "+%s")
	inval=$(snmpget -Oqv -c public -v 1 $router $inmib)
	outval=$(snmpget -Oqv -c public -v 1 $router $outmib)
	date_h=$(date -r "$date_s" "+%Y-%m-%d %H:%M:%S")
}

function print_data {

	case $use_format in
	1)
		printf "$report_format1" "$date_h" $inval $outval $date_s >> "$report"
		printf "$report_format1" "$date_h" $inval $outval $date_s
	;;
	2)
		printf "$report_format2" "$date_h" $inval $outval >> "$report"
	;;
	3)
		printf "$report_format3" "$date_h" $inval $outval $in0 $ou0 >> "$report"
	;;
	4)
		printf "$report_format4" "$date_h" $inval $outval $in0 $ou0 $ins $ous $interval >> "$report"
	;;
	5)
		printf "$report_format4" "$date_h" $inval $outval $in0 $ou0 $ins $ous $int1 $out1 $tot1 >> "$report"
		printf "$report_format4" "$date_h" $inval $outval $in0 $ou0 $ins $ous $int1 $out1 $tot1
	;;
	6)
		printf "$report_format4" "$date_h" $inval $outval $in0 $ou0 $ins $ous $int1 $out1 $tot1 >> "$report"
		printf "$report_format6" "$date_h" $inval $outval $in0 $ou0 $ins $ous $int1 $out1 $tot1
	;;
	7)
		printf "$report_format4" "$date_h" $inval $outval $in0 $ou0 $ins $ous $int1 $out1 $tot1 >> "$report"
		printf "$report_format7r" "$date_h" $ins $ous
	;;
	esac

}

function get_prev_month {

	thisyear=$(date +%Y)
	thismonth=$(date +%m)
	#thismonth=1 # to test looking back over the year boundary
	(( thismonth = thismonth )) # remove leading zero
	echo This month is month $thismonth.

	(( lastmonth = thismonth - 1 ))

	if [[ $lastmonth -le 0 ]] ; then
		lastmonth=12
		(( lastmonth_yr = $thisyear - 1 ))
	else
		lastmonth_yr=$thisyear
	fi

	#echo Last month was month $lastmonth.
	#echo The year of last month was $lastmonth_yr.

	billdate_h=$(date -jf "%Y-%m-%d-%H:%M:%S" "${lastmonth_yr}-${lastmonth}-${billing_day}-00:00:00")
	  billdate=$(date -jf "%Y-%m-%d-%H:%M:%S" "${lastmonth_yr}-${lastmonth}-${billing_day}-00:00:00" "+%s")

	#echo This billing cycle started on $billdate_h.
	#echo This was $billdate seconds.
}

function find_start {

	get_prev_month

	date_read=0
	inc=0
	outc=0
	rollovers_in=0
	rollovers_out=0
	searching=1
	exec 5<"$report"
	echo Searching "$report" for the last benchmark.

	set -f    # disable file name generation (globbing)

	while read -a lines ; do
		#lines=( $(<&5) )
		if [ "x$searching" = "x1" ] ; then
			date_read=$(date -jf "%Y-%m-%d-%H:%M:%S" "${lines[0]}-${lines[1]}" "+%s")
			echo "Read:"'>'"${lines[@]}"'<'" seconds=$date_read"
			if [[ $date_read -gt $billdate ]] ; then
				inc="${lines[2]}"
				outc="${lines[3]}"
				oldin="${lines[2]}"
				oldout="${lines[3]}"
				date_h="${lines[0]} ${lines[1]}"
				date_s=$(date -jf "%Y-%m-%d-%H:%M:%S" "${lines[0]}-${lines[1]}" +%s)
				last_date=$date_s
				inval="${lines[2]}"
				outval="${lines[3]}"
				echo "Benchmark found at $date_read epoch seconds. ${lines[@]}"
				searching=0
			fi
		else
			if [[ ${lines[2]} -lt $inc ]] ; then
				(( rollovers_in++ ))
				inc="${lines[2]}"
			fi
			if [[ ${lines[3]} -lt $outc ]] ; then
				(( rollovers_out++ ))
				outc="${lines[3]}"
			fi
		fi
	done <&5

	set +f

	printf "     %10s %9s\n" 'Bytes' 'Rollovers'
	printf "     %10s %9s\n" '----------' '---------'
	printf "In:  %10s %9s\n" $oldin $rollovers_in
	printf "Out: %10s %9s\n" $oldout $rollovers_out

	exec 5<&-
}

find_start

header

printf "$report_format1" "$date_h" $inval $outval $date_s

read_counters

datenow="$date_s"

(( elapsed = datenow - last_date ))
(( elapsed_days = elapsed / 3600 * 24 ))
(( usedin = inval - oldin + countmax * rollovers_in ))
(( usedout = outval - oldout + countmax * rollovers_out ))

usedin_ki=$(echo "scale = 10 ; a = $usedin / 1024 ; scale = 0 ; a/1" | bc)
usedout_ki=$(echo "scale = 10 ; a = $usedout / 1024 ; scale = 0 ; a/1" | bc)
usedin_k=$(echo "scale = 10 ; a = $usedin / 1000 ; scale = 0 ; a/1" | bc)
usedout_k=$(echo "scale = 10 ; a = $usedout / 1000 ; scale = 0 ; a/1" | bc)
usedin_Mi=$(echo "scale = 10 ; a = $usedin_ki / 1024 ; scale = 0 ; a/1" | bc)
usedout_Mi=$(echo "scale = 10 ; a = $usedout_ki / 1024 ; scale = 0 ; a/1" | bc)
usedin_M=$(echo "scale = 10 ; a = $usedin_k / 1000 ; scale = 0 ; a/1" | bc)
usedout_M=$(echo "scale = 10 ; a = $usedout_k / 1000 ; scale = 0 ; a/1" | bc)
usedin_Gi=$(echo "scale = 10 ; a = $usedin_Mi / 1024 ; scale = 0 ; a/1" | bc)
usedout_Gi=$(echo "scale = 10 ; a = $usedout_Mi / 1024 ; scale = 0 ; a/1" | bc)
usedin_G=$(echo "scale = 10 ; a = $usedin_M / 1000 ; scale = 0 ; a/1" | bc)
usedout_G=$(echo "scale = 10 ; a = $usedout_M / 1000 ; scale = 0 ; a/1" | bc)

ed=$(echo "scale = 10 ; a = $elapsed / 60 / 60 / 24 ; scale = 0 ; a/1" | bc)
eh=$(echo "scale = 10 ; a = ( $elapsed - $ed * 60 * 60 * 24 ) / 60 / 60 ; scale = 0 ; a/1" | bc)
em=$(echo "scale = 10 ; a = ( $elapsed - $ed * 60 * 60 * 24 - $eh * 60 * 60 ) / 60 ; scale = 0 ; a/1" | bc)
es=$(echo "a = $elapsed - $ed * 60 * 60 * 24 - $eh * 60 * 60 - $em * 60 ; scale = 0 ; a/1" | bc)

printf "$report_format1" "$date_h" $inval $outval $usedin $usedout $usedin_M $usedout_M $USER
printf "$report_format1" "$date_h" $inval $outval $usedin $usedout $usedin_M $usedout_M $USER >> $report
echo
printf "%10s = %10s - %10s + %10s * %10s\n" used new old countmax rollovers
printf "%10s = %10s - %10s + %10s * %10s\n" '----------' '----------' '----------' '----------' '----------'
printf "%10s = %10s - %10s + %10s * %10s\n" $usedin $inval $oldin $countmax $rollovers_in
printf "%10s = %10s - %10s + %10s * %10s\n" $usedout $outval $oldout $countmax $rollovers_out

echo
printf "$report_format1" " " "total elapsed" "seconds" "$elapsed"
echo
printf "$report_format1" " " " " "$ed d"
printf "$report_format1" " " " " "$eh h"
printf "$report_format1" " " " " "$em m"
printf "$report_format1" " " " " "$es s"
echo
printf "$report_format1" "SI: kB" "$usedin_k" "$usedout_k"
printf "$report_format1" "MB"     "$usedin_M" "$usedout_M"
printf "$report_format1" "GB"     "$usedin_G" "$usedout_M"
echo
printf "$report_format1" "ITU: KiB" "$usedin_ki" "$usedout_ki"
printf "$report_format1" "MiB"      "$usedin_Mi" "$usedout_Mi"
printf "$report_format1" "GiB"      "$usedin_Gi" "$usedout_Mi"
tail "$report"
echo
echo "In: $usedin_M MB Out: $usedout_M MB"
