#!/bin/bash

#############################################################################
# message
#############################################################################

function message {

	echo '------------------------------------------------------------' $(date +%H:%M:%S) "${myname}:" "$1"

} >&2

#############################################################################
# Debug
#############################################################################

function debug {

	echo 'msg='"$msg"'<' >&2
	echo ' p1='"$p1"'<' >&2
	echo ' p2='"$p2"'<' >&2

}

#############################################################################
# check-parms
#############################################################################

function check-parms {

	if [ "x$1" = "xdebug" ] ; then
		do_debug=yes
		shift
	fi

	msg="$1"
	shift

	p1=$(echo "$1" | sed 's/^.\(.*\).$/\1/')
	p2=$(echo "$2" | sed 's/^.\(.*\).$/\1/')

	[[ "$do_debug" ]] && debug

	if [ "x$p1" = "x" ] ; then
		echo "$msg"
		message "end. (fail)"
		exit 1
	fi

}

#############################################################################
# parameter-check
#############################################################################

function parameter-check {

	test="parameter-check"

	[[ "$debug" ]] && message "$test - start."

	result=$(check-parms $debug"$msg" "/${p1}/" "/${p2}/")

	if [ "x$result" != "x" ] ; then

		if [[ "$debug" ]] ; then

			echo "result=$result"'<' >&2

			message "$test - done. (fail)"

		else

			echo "$result" >&2

		fi

		echo 'fail'

		exit 1

	else

		[[ "$debug" ]] && message "${test}. (pass)"

	fi

	[[ "$debug" ]] && safety-check 1

}

#############################################################################
# ask-continue
#############################################################################

function ask-continue {

	echo 'Continue?'

	select rsp in yes no ; do

		case "$rsp" in

			'yes')

				echo "Right on! Let's go!"
				break
				;;

			'no')

				echo "OK, you're the boss!"
				exit 1
				;;
		esac

	done
}

#############################################################################
# safety-check
#############################################################################

function safety-check {

	if [[ "$debug" ]] ; then

		test="safety-check"

		message "$test $1 start."

		varchkfmt='%15s%s\n'

		case "$1" in
			1)
				printf "$varchkfmt" 'p2=' "$p2"
				printf "$varchkfmt" 'msg=' "$msg"
				printf "$varchkfmt" 'result=' "$result"
				printf "$varchkfmt" 'type=' "$type"
				printf "$varchkfmt" 'dir=' "$dir"
				printf "$varchkfmt" 'sums=' "$sums"
				printf "$varchkfmt" 'dups=' "$dups"
				printf "$varchkfmt" 'list=' "$list"
				printf "$varchkfmt" 'output=' "$output"

				;;
			2)
				printf "$varchkfmt" 'line=' "$line"
				printf "$varchkfmt" 'a=' "$a"
				printf "$varchkfmt" 'sum=' "$sum"
				printf "$varchkfmt" 'filename=' "$filename"
				printf "$varchkfmt" 'prev=' "$prev"
				printf "$varchkfmt" 'dest=' "$dest"
				;;
			*)
				echo "There is no Safety-Check ${1}, silly!"
				;;
		esac

		message "$test $1 done."

	fi

} >&2

#############################################################################
# check-presence
#############################################################################

function check-presence {

	test="check presence $input"

	if ! [[ -e "$input" ]] ; then
		message "$test (fail)"
		echo "Oops! I can't find" >&2
		echo "$input" >&2
		echo "I'll ask for a new one..." >&2
		message "paused."
		get-$prg1 "$1" "$2" >&2
		message "resume."
		if ! [[ -e "$input" ]] ; then
			echo "Oops! I still can't find" >&2
			echo "$input" >&2
			echo "Giving up." >&2
			message "$test (fail)"
			echo 'fail'
			exit 1
		fi
	else
		echo "Let's go! I found" >&2
		echo "$input" >&2
		message "$test (pass)"
	fi
}

#############################################################################
# check-dir
#############################################################################

function check-dir {

	test="Directory check"

	if ! [ -e "$dir" ] ; then
		echo "I need to create directory $dir" >&2
		mkdir "$dir" >&2
		if [ "$?" = 0 ] ; then
			message "$test (pass)"
		else
			echo "I couldn't create the directory for some reason!" >&2
			message "$test (fail)"
			echo 'fail'
		fi
	elif ! [ -d "$dir" ] ; then
		echo "I need to make a directory called '${dir}'" >&2
		echo "but there's already something there...!" >&2
		message "$test (fail)"
		echo 'fail'
		exit 1
	else
		echo "I found the following directory:" >&2
		echo "$dir" >&2
		echo "Great! This is where I'll put the sum.files." >&2
		message "$test (pass)"
	fi

	message "Directory OK."
}

#############################################################################
# display-hint-1
#############################################################################

function display-hint-1 {

	echo "If this program finises too quickly," >&2
	echo "try: 'rm $output' then try again." >&2
	echo "To be more thorough and get the checksums again," >&2
	echo "try: 'rm $input' then try again." >&2

}

#############################################################################
# make_chk.key
#############################################################################

function make_chk.key {

	if [[ '/home/jim/bin/_pic_analysis_header' -nt 'chk.key' ]] ; then
		hd=
		hl=
		for (( i = 1 ; i <= "${#tagv[*]}" ; i++ )) ; do
			hd="$hd${chkv[$i]}"
			hl="${hl}-"
			echo "${chkv[$i]} ${tagv[$i]}" >> chk.key
		done
		for (( i = 1 ; i <= "${#tag[*]}" ; i++ )) ; do
			hd="$hd${chk[$i]}"
			hl="${hl}-"
			echo "${chk[$i]} ${tag[$i]} ${str[$i]}" >> chk.key
		done
		for (( i = 1 ; i <= "${#tagz[*]}" ; i++ )) ; do
			hd="$hd${chkz[$i]}"
			hl="${hl}-"
			echo "${chkz[$i]} ${tagz[$i]}" >> chk.key
		done
		echo >> chk.key
		echo "$hd" >> chk.key
		echo "$hl" >> chk.key
	fi

}

#############################################################################
# check-tags
#############################################################################

function check-tags {
	res=
	dot='.'
	term='z'
	file1=$(echo "$file" | sed 's/^\(.*\)\.pic$/\1/')
	for (( i = 1 ; i <= ${#tagv[*]} ; i++ )) ; do
		if [ $(grep "${tagv[$i]}" "${file1}.tags" | wc -l) != 0 ] ; then
			res="$res${chkv[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tag[*]} ; i++ )) ; do
		if [ $(grep "${tag[$i]}" "${file1}.tags" | grep "${str[$i]}" | wc -l) != 0 ] ; then
			res="$res${chk[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tagz[*]} ; i++ )) ; do
		if [ "x$(grep "${tagz[$i]}" "${file1}.tags" | sed 's/. [^ ]* [^ ]* *[^ ]* *: \?\(.*\)/\1/')" != 'x' ] ; then
			res="$res${chkz[$i]}"
		else
			res="$res$dot"
		fi
	done
	res="$res$term"
	echo "$res" "$file1"
}

#############################################################################
# setup-input
#############################################################################

function setup-input {

	input="${type}.$prg1"

	if [[ "$prg" != "list" ]] ; then

		check-presence "$1" "$2"

		total=$(cat "$input" | grep -Ev "(^$)" | wc -l)
		echo "$total lines to process from ${input}..."

		mv "$input" /tmp/in6
		exec 6</tmp/in6

	fi

}

#############################################################################
# Init
#############################################################################

bin='/home/jim/bin'
myname=$(basename "$0")
message "Begin."
if [ "x$1" = "xdebug" ] ; then
	debug='debug '
	shift
	message 'Debug is on.'
else
	message 'Debug is off.'
fi

#############################################################################
# Tags
#############################################################################

tagv[1]='Picasa'					# flag is set if given tag is present
chkv[1]='P'
tagv[2]='CurrentIPTCDigest'
chkv[2]='D'
tagv[3]='ImageUniqueID'
chkv[3]='I'
tagv[4]='Keywords'
chkv[4]='K'
tagv[5]='0x9003'
chkv[5]='o'
tagv[6]='0x9004'
chkv[6]='c'
tagv[7]='0x0132'
chkv[7]='m'

 tag[1]='ExifByteOrder'			# flag is set if tag contains given value
 str[1]='Little'
 chk[1]='L'

tagz[1]='UserComment'			# flag is set if tag value is not blank
chkz[1]="U"

make_chk.key

#############################################################################
# Type
#############################################################################

p1="$1"
p2="$2"

[[ "$p2" ]] && p2=".$p2"

type="$p1$p2"

#############################################################################
# Vars
#############################################################################

   list="${type}.list"
   sums="${type}.sums"
sumdups="${type}}.sumdups"
   dups="${type}.dups"
duplist="${type}.duplist"
  diffs="${type}.diffs"
    dir="${type}.files"
    msg="Try $(basename $0) jpg or $(basename $0) jpg pic"

files=files
 set1=set1

total=0
count=0
errcount=0

[[ "$debug" ]] && safety-check 1

#############################################################################
# Parameters
#############################################################################

[[ "$(parameter-check)" ]] && exit 1

#############################################################################
# Input and Output Files
#############################################################################

prg=$(echo "$(basename $0)" | sed 's/^get-\(.*\)/\1/')

case "$prg" in

	list) # get-list
		:
		;;

	tags) # get-tags
		prg1="list"
		setup-input "$1" "$2"
		;;

	sums) # get-sums

		prg1="list"
		setup-input "$1" "$2"
		;;

	sumdups) # get-sumdups

		prg1="sums"
		setup-input "$1" "$2"
		;;

	dups) # get-dups

		prg1="sumdups"
		setup-input "$1" "$2"
		check-dir
		;;

	duplist) # get-duplist

		prg1="dups"
		setup-input "$1" "$2"
		check-dir
		;;

	diffs) #get-diffs

		prg1="duplist"
		setup-input "$1" "$2"
		check-dir
		;;
esac

output="${type}.$prg"
exec 7>/tmp/out7

#display-hint-1
