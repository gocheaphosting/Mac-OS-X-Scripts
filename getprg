
/home/jim/bin/_pic_analysis_header

     1	#!/bin/bash
     2	
     3	#############################################################################
     4	# message
     5	#############################################################################
     6	
     7	function message {
     8	
     9		echo '------------------------------------------------------------' $(date +%H:%M:%S) "${myname}:" "$1"
    10	
    11	} >&2
    12	
    13	#############################################################################
    14	# parameter-check
    15	#############################################################################
    16	
    17	function parameter-check {
    18	
    19		test="parameter-check"
    20	
    21		[[ "$debug" ]] && message "$test - start."
    22	
    23		result=$(check-parms $debug"$msg" "/${p1}/" "/${p2}/")
    24	
    25		if [ "x$result" != "x" ] ; then
    26	
    27			if [[ "$debug" ]] ; then
    28	
    29				echo "result=$result"'<' >&2
    30	
    31				message "$test - done. (fail)"
    32	
    33			else
    34	
    35				echo "$result" >&2
    36	
    37			fi
    38	
    39			echo 'fail'
    40	
    41			exit 1
    42	
    43		else
    44	
    45			[[ "$debug" ]] && message "${test}. (pass)"
    46	
    47		fi
    48	
    49		[[ "$debug" ]] && safety-check 1
    50	
    51	}
    52	
    53	#############################################################################
    54	# ask-continue
    55	#############################################################################
    56	
    57	function ask-continue {
    58	
    59		echo 'Continue?'
    60	
    61		select rsp in yes no ; do
    62	
    63			case "$rsp" in
    64	
    65				'yes')
    66	
    67					echo "Right on! Let's go!"
    68					break
    69					;;
    70	
    71				'no')
    72	
    73					echo "OK, you're the boss!"
    74					exit 1
    75					;;
    76			esac
    77	
    78		done
    79	}
    80	
    81	#############################################################################
    82	# safety-check
    83	#############################################################################
    84	
    85	function safety-check {
    86	
    87		if [[ "$debug" ]] ; then
    88	
    89			test="safety-check"
    90	
    91			message "$test $1 start."
    92	
    93			varchkfmt='%15s%s\n'
    94	
    95			case "$1" in
    96				1)
    97					printf "$varchkfmt" 'p2=' "$p2"
    98					printf "$varchkfmt" 'msg=' "$msg"
    99					printf "$varchkfmt" 'result=' "$result"
   100					printf "$varchkfmt" 'type=' "$type"
   101					printf "$varchkfmt" 'dir=' "$dir"
   102					printf "$varchkfmt" 'sums=' "$sums"
   103					printf "$varchkfmt" 'dups=' "$dups"
   104					printf "$varchkfmt" 'list=' "$list"
   105					printf "$varchkfmt" 'output=' "$output"
   106	
   107					;;
   108				2)
   109					printf "$varchkfmt" 'line=' "$line"
   110					printf "$varchkfmt" 'a=' "$a"
   111					printf "$varchkfmt" 'sum=' "$sum"
   112					printf "$varchkfmt" 'filename=' "$filename"
   113					printf "$varchkfmt" 'prev=' "$prev"
   114					printf "$varchkfmt" 'dest=' "$dest"
   115					;;
   116				*)
   117					echo "There is no Safety-Check ${1}, silly!"
   118					;;
   119			esac
   120	
   121			message "$test $1 done."
   122	
   123		fi
   124	
   125	} >&2
   126	
   127	#############################################################################
   128	# check-presence
   129	#############################################################################
   130	
   131	function check-presence {
   132	
   133		test="check presence $input"
   134	
   135		if ! [[ -e "$input" ]] ; then
   136			message "$test (fail)"
   137			echo "Oops! I can't find" >&2
   138			echo "$input" >&2
   139			echo "I'll ask for a new one..." >&2
   140			message "paused."
   141			get-$prg1 "$1" "$2" >&2
   142			message "resume."
   143			if ! [[ -e "$input" ]] ; then
   144				echo "Oops! I still can't find" >&2
   145				echo "$input" >&2
   146				echo "Giving up." >&2
   147				message "$test (fail)"
   148				echo 'fail'
   149				exit 1
   150			fi
   151		else
   152			echo "Let's go! I found" >&2
   153			echo "$input" >&2
   154			message "$test (pass)"
   155		fi
   156	}
   157	
   158	#############################################################################
   159	# check-dir
   160	#############################################################################
   161	
   162	function check-dir {
   163	
   164		test="Directory check"
   165	
   166		if ! [ -e "$dir" ] ; then
   167			echo "I need to create directory $dir" >&2
   168			mkdir "$dir" >&2
   169			if [ "$?" = 0 ] ; then
   170				message "$test (pass)"
   171			else
   172				echo "I couldn't create the directory for some reason!" >&2
   173				message "$test (fail)"
   174				echo 'fail'
   175			fi
   176		elif ! [ -d "$dir" ] ; then
   177			echo "I need to make a directory called '${dir}'" >&2
   178			echo "but there's already something there...!" >&2
   179			message "$test (fail)"
   180			echo 'fail'
   181			exit 1
   182		else
   183			echo "I found the following directory:" >&2
   184			echo "$dir" >&2
   185			echo "Great! This is where I'll put the sum.files." >&2
   186			message "$test (pass)"
   187		fi
   188	
   189		message "Directory OK."
   190	}
   191	
   192	#############################################################################
   193	# display-hint-1
   194	#############################################################################
   195	
   196	function display-hint-1 {
   197	
   198		echo "If this program seems to finish too quickly," >&2
   199		echo "try: 'rm $output' then try again." >&2
   200		echo "To be more thorough and get the checksums again," >&2
   201		echo "try: 'rm $input' then try again." >&2
   202	
   203	}
   204	
   205	#############################################################################
   206	# make_chk.key
   207	#############################################################################
   208	
   209	function make_chk.key {
   210	
   211		if [[ '/home/jim/bin/_pic_analysis_header' -nt 'chk.key' ]] ; then
   212			hd=
   213			hl=
   214			for (( i = 1 ; i <= "${#tagv[*]}" ; i++ )) ; do
   215				hd="$hd${chkv[$i]}"
   216				hl="${hl}-"
   217				echo "${chkv[$i]} ${tagv[$i]}" >> chk.key
   218			done
   219			for (( i = 1 ; i <= "${#tag[*]}" ; i++ )) ; do
   220				hd="$hd${chk[$i]}"
   221				hl="${hl}-"
   222				echo "${chk[$i]} ${tag[$i]} ${str[$i]}" >> chk.key
   223			done
   224			for (( i = 1 ; i <= "${#tagz[*]}" ; i++ )) ; do
   225				hd="$hd${chkz[$i]}"
   226				hl="${hl}-"
   227				echo "${chkz[$i]} ${tagz[$i]}" >> chk.key
   228			done
   229			echo >> chk.key
   230			echo "$hd" >> chk.key
   231			echo "$hl" >> chk.key
   232		fi
   233	
   234	}
   235	
   236	#############################################################################
   237	# Init
   238	#############################################################################
   239	
   240	bin='/home/jim/bin'
   241	
   242	myname=$(basename "$0")
   243	
   244	message "Begin."
   245	
   246	if [ "x$1" = "xdebug" ] ; then
   247	
   248		debug='debug '
   249	
   250		shift
   251	
   252		message 'Debug is on.'
   253	
   254	else
   255	
   256		message 'Debug is off.'
   257	
   258	fi
   259	
   260	#############################################################################
   261	# Tags
   262	#############################################################################
   263	
   264	tagv[1]='Picasa'
   265	chkv[1]='P'
   266	tagv[2]='CurrentIPTCDigest'
   267	chkv[2]='D'
   268	tagv[3]='ImageUniqueID'
   269	chkv[3]='I'
   270	tagv[4]='Keywords'
   271	chkv[4]='K'
   272	
   273	 tag[1]='ExifByteOrder'
   274	 str[1]='Little'
   275	 chk[1]='L'
   276	
   277	tagz[1]='UserComment'
   278	chkz[1]="U"
   279	
   280	make_chk.key
   281	
   282	#############################################################################
   283	# Type
   284	#############################################################################
   285	
   286	p1="$1"
   287	p2="$2"
   288	
   289	[[ "$p2" ]] && p2=".$p2"
   290	
   291	type="$p1$p2"
   292	
   293	#############################################################################
   294	# Vars
   295	#############################################################################
   296	
   297	   list="${type}.list"			# get-list jpg
   298	   sums="${type}.sums"			# get-sums jpg pic
   299	sumdups="${type}}.sumdups"
   300	   dups="${type}.dups"			# get-dups jpg pic
   301	duplist="${type}.duplist"		# get-sets jpg pic
   302	    dir="${type}.files"			# folder of lists of duplicates, by checksum.
   303	    msg="Try $(basename $0) jpg or $(basename $0) jpg pic"
   304	
   305	files=files
   306	 set1=set1
   307	
   308	total=0
   309	count=0
   310	errcount=0
   311	
   312	[[ "$debug" ]] && safety-check 1
   313	
   314	#############################################################################
   315	# Parameters
   316	#############################################################################
   317	
   318	[[ "$(parameter-check)" ]] && exit 1
   319	
   320	#############################################################################
   321	# Input and Output Files
   322	#############################################################################
   323	
   324	prg=$(echo "$(basename $0)" | sed 's/^get-\(.*\)/\1/')
   325	
   326	case "$prg" in
   327	
   328		list)
   329			:
   330			;;
   331	
   332		sums)
   333	
   334			prg1="list"
   335			;;
   336	
   337		sumdups)
   338	
   339			prg1="sums"
   340			;;
   341	
   342		dups)
   343	
   344			prg1="sumdups"
   345			;;
   346	
   347		duplist)
   348	
   349			prg1="dups"
   350			;;
   351	
   352		diffs)
   353	
   354			prg1="duplist"
   355			;;
   356	esac
   357	
   358	input="${type}.$prg1"
   359	output="${type}.$prg"
   360	
   361	if [[ "$output" != "$list" ]] ; then
   362		check-presence "$1" "$2"
   363		total=$(cat "$input" | grep -Ev "(^$)" | wc -l)
   364		echo "$total lines to process from ${input}..."
   365		mv "$input" /tmp/in6
   366		exec 6</tmp/in6
   367	fi
   368	
   369	[[ "$output" = "$duplist" ]] && check-dir
   370	[[ "$output" = "$dups" ]] && check-dir
   371	
   372	#display-hint-1
   373	
   374	exec 7>/tmp/out7

/home/jim/bin/get-list

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	echo "Generating list of $type files..." >&2
     6	
     7	find -iname "*$1" -type f > "${output}.tmp"
     8	total=$(cat "$output".tmp | wc -l)
     9	echo "I'm finished writing $output and it has $total $type files." >&2
    10	
    11	cat "${output}.tmp" | sort >&7
    12	
    13	rm "${output}.tmp"
    14	
    15	. '/home/jim/bin/_pic_analysis_footer'

/home/jim/bin/get-tags

     1	#!/bin/bash
     2	. '/home/jim/bin/_pic_analysis_header'
     3	. ${bin}/_check_params_1
     4	. ${bin}/_check_list
     5	cat $list | \
     6	while read file ; do
     7		if ! [[ -e "$file".tags ]] ; then
     8			exiftool -G -H -s -e "$file" > "$file".tags 2>/dev/null
     9		fi
    10		. ${bin}/_show_list_lines_progress
    11	done

/home/jim/bin/get-sums

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	test="Generating checksums and list"
     6	message "$test - start."
     7	
     8	if [[ "$p2" ]] ; then
     9		while read file ; do
    10			if ! [[ -e "$file${p2}.sum" ]] ; then
    11				if ! [[ -e "$file$p2" ]] ; then
    12					exiftool -m -o "$file$p2" -All= "$file"
    13					sum=$(md5sum "$file$p2")
    14					echo "$sum" > "$file${p2}.sum"
    15					echo "$sum" >&7
    16					rm "$file$p2"
    17				else
    18					sum=$(md5sum "$file$p2")
    19					echo "$sum" > "$file${p2}.sum"
    20					echo "$sum" >&7
    21				fi
    22			else
    23				cat "$file${p2}.sum" >&7
    24			fi
    25			. "${bin}/show-progress"
    26		done <&6
    27	else
    28		while read file ; do
    29			if ! [[ -e "${file}.sum" ]] ; then
    30				sum=$(md5sum "$file")
    31				echo "$sum" > "${file}.sum"
    32				echo "$sum" >&7
    33			else
    34				cat "${file}.sum" >&7
    35			fi
    36			. "${bin}/show-progress"
    37		done <&6
    38	fi
    39	echo
    40	message "$test - done."
    41	. '/home/jim/bin/_pic_analysis_footer'

/home/jim/bin/get-sumdups

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	#############################################################################
     6	# Sumdups
     7	#############################################################################
     8	
     9	test="finding duplicates"
    10	
    11	[[ "$debug" ]] && message "$test - start."
    12	
    13	cat /tmp/in6 | sort | uniq -w 32 --all-repeated=separate >&7
    14	
    15	[[ "$debug" ]] && message "$test - done."
    16	
    17	. "${bin}/_pic_analysis_footer"

/home/jim/bin/get-dups

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	while read line ; do
     6	
     7		a=($line)
     8		sum="${a[0]}"
     9		filename=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
    10	
    11		case "$sum" in
    12	
    13			"$prev")
    14	
    15				echo "$filename" >&8
    16	
    17				. "${bin}/show-progress" >&2
    18				;;
    19	
    20			'')
    21	
    22				exec 8>&-
    23				mv /tmp/out8 "$dest"
    24				;;
    25	
    26			*)
    27	
    28				exec 8>/tmp/out8
    29				echo "$filename" >&8
    30				echo "$sum" >&7
    31	
    32				dest="${dir}/${sum}.${files}"
    33				if [ -e "$dest" ] ;then
    34					rm "$dest"
    35				fi
    36	
    37				. "${bin}/show-progress" >&2
    38				;;
    39	
    40		esac
    41	
    42		prev="$sum"
    43	
    44	done <&6
    45	
    46	exec 8>&-
    47	mv /tmp/out8 "$dest"
    48	echo
    49	. "${bin}/_pic_analysis_footer"

/home/jim/bin/get-duplist

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	exec 7>&-
     6	
     7	while read sum ; do
     8	
     9		src="${dir}/${sum}.${files}"
    10		dest="${dir}/${sum}.${set1}"
    11	
    12		if ! [[ -e "$src" ]] ; then
    13	
    14			(( errcount++ ))
    15			message "ERROR $errcount. $src not found!"
    16	
    17		elif [[ "$src" -nt "$dest" ]] ; then
    18	
    19			mv "$src" /tmp/in8
    20			exec 8</tmp/in8
    21			exec 7>/tmp/out7
    22	
    23			while read file ; do
    24	
    25				check-tags "$file" >&7
    26	
    27			done <&8
    28	
    29			exec 7>&-
    30			exec 8<&-
    31			mv /tmp/in8 "$src"
    32			cat /tmp/out7 | sort > "$dest"
    33	
    34		fi
    35	
    36		. "${bin}/show-progress"
    37	
    38	done <&6
    39	
    40	. '/home/jim/bin/_pic_analysis_footer'

/home/jim/bin/get-diffs

     1	#!/bin/bash
     2	
     3	. '/home/jim/bin/_pic_analysis_header'
     4	
     5	#############################################################################
     6	# _cull-diff
     7	#############################################################################
     8	
     9	function _cull-diff {
    10	
    11		grep -Ev "(^---)|(^[,0-9]*[acd][0-9])|(FilePermissions)|(Offset)"
    12	
    13	}
    14	
    15	#############################################################################
    16	# _get-diffs
    17	#############################################################################
    18	
    19	function _get-diffs {
    20	
    21		while read sum ; do
    22	
    23			dest="${dir}/${sum}.$set"
    24	
    25			if ! [[ -e "$dest" ]] ; then
    26	
    27				echo "No list of duplicates found for ${sum}"
    28				echo "Try running get-$prg1 $1 $2"
    29	
    30			else
    31	
    32				difc=
    33	
    34				while read line ; do
    35	
    36					filename=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
    37	
    38					[[ "$difc" ]] diff "$filenameb".tags "$filename".tags | _cull-diff > "$filenameb".diff
    39	
    40					filenameb="$filename"
    41	
    42					(( difc++ ))
    43	
    44				done < "$dest"
    45	
    46			fi
    47	
    48			echo "$sum"
    49	
    50		done <&6
    51	}
    52	
    53	#############################################################################
    54	# _remove-samevals
    55	#############################################################################
    56	
    57	function _remove-samevals {
    58	
    59		if [[ $(_check-dates "$prev".diff.diffvals "$prev".diff.bykey) ]] ; then
    60	
    61			echo > "$prev".diff.diffvals
    62	
    63			count=
    64			unset fl
    65	
    66			valp=impossiblevaluetomatch
    67	
    68			while read line ; do
    69	
    70				(( count++ ))
    71				(( countp = $count - 1 ))
    72	
    73				val=$(echo "$line)" | sed 's/[<>] [^ ]* *[^ ]* *[^ ]* *: \?\(.*\)/\1/')
    74	
    75				if [ "x$val" = "x$valp" ] ; then
    76					fl[$countp]=delete
    77					fl[$count]=delete
    78				fi
    79	
    80				valp="$val"
    81	
    82			done < "$prev".diff.bykey
    83	
    84			count=
    85	
    86			while read line ; do
    87	
    88				(( count++ ))
    89	
    90				if [ "x${fl[$count]}" = "x" ] ; then
    91					echo "$line" >> "$prev".diff.diffvals
    92				fi
    93	
    94			done < "$prev".diff.bykey
    95	
    96		fi
    97	}
    98	
    99	#############################################################################
   100	# _remove-samekeys
   101	#############################################################################
   102	
   103	function _remove-samekeys {
   104	
   105		if [[ $(_check-dates "$prev".diff.diffkeys "$prev".diff.diffvals) ]] ; then
   106	
   107			echo > "$prev".diff.diffkeys
   108			count=
   109			unset fl
   110			keyp=impossiblevaluetomatch
   111	
   112			while read line ; do
   113	
   114				(( count++ ))
   115				(( countp = $count - 1 ))
   116				a=($line)
   117	
   118				key="${a[3]}"
   119				if [ "x$key" = "x$keyp" ] ; then
   120	
   121					fl[$count]=delete
   122					fl[$countp]=delete
   123	
   124				fi
   125	
   126				keyp="$key"
   127	
   128			done < "$prev".diff.diffvals
   129	
   130			count=
   131	
   132			while read line ; do
   133	
   134				(( count++ ))
   135	
   136				if [ "x${fl[$count]}" = "x" ] ; then
   137	
   138					echo "$line" >> "$prev".diff.diffkeys
   139	
   140				fi
   141	
   142			done < "$prev".diff.diffvals
   143	
   144		fi
   145	}
   146	#############################################################################
   147	function _print-diff {
   148		echo
   149		echo '.............................................................................'
   150		echo
   151		cat -n "$sum".chk | grep -E '(^ *'$filecount')|(^)' --color=auto
   152		echo
   153		! [[ -e "$prev".diff ]] && _get-diffs
   154		if [[ "${prev}.diff" -nt "${prev}.diff.bykey") ]] ; then
   155			cat "${prev}.diff" | sort -k4,4 -k3,3 -k1,1 > "${prev}.diff.bykey"
   156			cat "${prev}.diff.bykey" | uniq -f 5 --all-repeated=separate > "${prev}.diff.samevals"
   157			_remove-samevals
   158			cat "${prev}.diff.diffvals" | uniq -f 3 -w 15 --all-repeated=separate > "${prev}.diff.samekeys"
   159			_remove-samekeys
   160		fi
   161		if [[ "x$(wc -l "${prev}.diff.samevals")" > "x1" ]] ; then
   162			echo
   163			echo MOVED
   164			echo $filecountp
   165			cat "${prev}.diff.samevals" | grep -E "(^<)"
   166			echo $filecount | grep -E "(.)" --color=auto
   167			cat "${prev}.diff.samevals" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
   168		fi
   169		if [[ "x$(wc -l "${prev}.diff.samekeys")" > "x1" ]] ; then
   170			echo
   171			echo CHANGED
   172			echo $filecountp
   173			cat "${prev}.diff.samekeys" | grep -E "(^<)"
   174			echo $filecount | grep -E "(.)" --color=auto
   175			cat "${prev}.diff.samekeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
   176		fi
   177		if [[ "x$(wc -l "${prev}.diff.diffkeys")" > "x1" ]] ; then
   178			echo
   179			echo ADDED/DELETED
   180			echo $filecountp
   181			cat "${prev}.diff.diffkeys" | grep -E "(^<)"
   182			echo $filecount | grep -E "(.)" --color=auto
   183			cat "${prev}.diff.diffkeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
   184		fi
   185		echo
   186		echo BY TAG
   187		cat "${prev}.diff.bykey" | grep -E "(^>)|(^)" --color=auto
   188		echo
   189		echo BY FILE
   190		echo $filecountp
   191		cat "${prev}.diff.bykey" | grep -E "(^<)"
   192		echo $filecount | grep -E "(.)" --color=auto
   193		cat "${prev}.diff.bykey" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
   194		echo
   195		cat -n "$sum".chk | grep -E '(^ *'$filecount')|(^)' --color=auto
   196		echo
   197	}
   198	#############################################################################
   199	function _print-diffs {
   200		prev=
   201		filecount=
   202		unset filenames
   203		echo
   204		echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
   205		echo
   206		while read line ; do
   207			file=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
   208			(( filecount++ ))
   209			(( filecountp = filecount - 1 ))
   210			filenames[$filecount]="$file"
   211			[[ "$prev" ]] && _print-diff
   212			prev="$file"
   213		done < "${sum}.chk"
   214	}
   215	
   216	_print-call _get-diffs pic
   217	
   218	exec 8>&-
   219	mv /tmp/out8 "$dest"
   220	echo
   221	. "${bin}/_pic_analysis_footer"
   222	
   223	

/home/jim/bin/_pic_analysis_footer

     1	#!/bin/bash
     2	
     3	#############################################################################
     4	# Footer
     5	#############################################################################
     6	
     7	#echo
     8	
     9	if [[ "$output" != "$list" ]] ; then
    10		exec 6<&-
    11		mv /tmp/in6 "$input"
    12		ls -l "$input" >&2
    13	fi
    14	
    15	exec 7>&-
    16	mv /tmp/out7 "$output"
    17	ls -l "$output" >&2
    18	
    19	message "Done."
    20	message "$errcount errors."
    21	exit
