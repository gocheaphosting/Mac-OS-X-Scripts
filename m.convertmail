#!/bin/bash

. "${HOME}/bin/general_header"
#. "${bin}/m._process_headers"

alert_type=short
suffix=".n"
input=mailfiles
log="${myname}.log"

LineNumColour="$White"
LineColour="$BrightBlack"
IDColour="$Yellow"
wname=15								# width of name column in mail output file.
woutput=40
declare -A charcodea chardesc charcodec
output=
continue=
state=
messagecount=
f=
linecount=
section=
name=
value=
charset=
description=
thisfile=

quot=\"

rm *. 2>/dev/null
rm *.u 2>/dev/null
rm *.n 2>/dev/null


               debug[id]=
         debug[dumpvars]=
  debug[setup_charcodes]=
    debug[close_section]=
     debug[open_section]=
            debug[parse]=
debug[write_messageline]=
      debug[get_charset]=
     debug[get_charcode]=
     debug[process_line]=
        debug[readlines]=
         debug[readline]=
        debug[readfiles]=
             debug[main]=

function rb.reset {
	name=
	value=
	output=
	linecount=
	section=
	charset=
	charcode=
	description=
	state=
	continue=yes
}

function rb.id {
	echo -e "$ColourOn${Yellow}mFunction:" "$ColourOn${BrightGreen}m$thisfile"
}

function rb.dumpvars {
	printval "Input:" "$input"
	printval "Output:" "$output"
	printval "Continue:" "$continue"
	printval "State:" "$state"
	printval "Messagecount:" "$messagecount"
	printval "File:" "$f"
	printval "Section:" "$section"
	printval "Name:" "$name"
	printval "Value:" "$value"
	printval "Charset:" "$charset"
	printval "Description:" "$description"
}

function rb.setup_charcodes {
         charcodea[ascii]=ascii	; chardesc[ascii]="ASCII"	;
       charcodea[usascii]=ascii
charcodea[printableascii]=ascii	;
          charcodea[utf7]=utf7	; chardesc[utf7]="Unicode"	;
          charcodea[utf8]=utf8	; chardesc[utf8]="Unicode"	;
         charcodea[utf16]=utf16	; chardesc[utf16]="Unicode"	;
       charcodea[utf16be]=utf16be; chardesc[utf16be]="Unicode"	;
       charcodea[utf16le]=utf16le; chardesc[utf16le]="Unicode"	;
       charcodea[unicode]=unicode; chardesc[unicode]="Unicode"	;
       charcodea[so88591]=88591	; chardesc[88591]="Western"	;	# this one is to catch an anomaly seen in the input
      charcodea[iso88591]=88591	; chardesc[88591]="Western"	;
      charcodea[iso88592]=88592	; chardesc[88592]="Central"	;
      charcodea[iso88593]=88593	; chardesc[88593]="Turkish"	;
      charcodea[iso88594]=88594	; chardesc[88594]="Baltic"	;
      charcodea[iso88595]=88595	; chardesc[88595]="Cryllic"	;
      charcodea[iso88596]=88596	; chardesc[88596]="Arabic"	;
      charcodea[iso88597]=88597	; chardesc[88597]="Greek"	;
      charcodea[iso88598]=88598	; chardesc[88598]="Hebrew"	;
      charcodea[iso88599]=88599	; chardesc[88599]="Turkish"	;
     charcodea[iso885910]=885910; chardesc[885910]="Nordic"	;
     charcodea[iso885911]=885911; chardesc[885911]="Thai"	;
     charcodea[iso885912]=885912; chardesc[885912]="Devengari"	;
     charcodea[iso885913]=885913; chardesc[885913]="Baltic"	;
     charcodea[iso885914]=885914; chardesc[885914]="Celtic"	;
     charcodea[iso885915]=885915; chardesc[885915]="Western"	;
     charcodea[iso885916]=885916; chardesc[885916]="Southern"	;
    charcodea[windows874]=874	; chardesc[874]="Thai"	;
   charcodea[windows1200]=1200
   charcodea[windows1250]=1250	; chardesc[1250]="European"	;
   charcodea[windows1251]=1251	; chardesc[1251]="Cryllic"	;
   charcodea[windows1252]=1252	; chardesc[1252]="Western"	;
   charcodea[windows1253]=1253	; chardesc[1253]="Greek"	;
   charcodea[windows1254]=1254	; chardesc[1254]="Turkish"	;
   charcodea[windows1255]=1255	; chardesc[1255]="Hebrew"	;
   charcodea[windows1256]=1256	; chardesc[1256]="Arabic"	;
   charcodea[windows1257]=1257	; chardesc[1257]="Baltic"	;
   charcodea[windows1258]=1258	; chardesc[1258]="Vietnam"	;
          charcodea[big5]=big5	; chardesc[big5]="Taiwan"	;
         charcodea[euckr]=euckr	; chardesc[eukcr]="Korean"	;
         charcodea[eucjp]=eucjp	; chardesc[eukjp]="Japanese"	;
        charcodea[gb2312]=2312	; chardesc[2312]="Chinese"	;
      charcodea[hzgb2312]=2312
      charcodea[iso2022cn]=2022cn ; chardesc[2022cn]="Chinese"	;
     charcodea[iso2022kr]=2022kr; chardesc[2022kr]="Korean"	;
     charcodea[iso2022jp]=2022jp; chardesc[2022jp]="Japanese"	;
         charcodea[koi8r]=koi8r	; chardesc[koi8r]="Cryllic"	;
         charcodea[koi8u]=koi8u	; chardesc[koi8u]="Ukrainian"	;
				  chardesc[unknown]='-'
#text/calendar; charset="utf-8"; name=
#text/calendar; method="REQUEST"; charset="utf-8"
#text/html; charset=""
#text/html; charset="big5"
#text/html; charset="euc-kr"
#text/html; charset="gb2312"
#text/html; charset="ISO-8859-1"
#text/html; charset=ISO-8859-1
#text/html; charset="iso-8859-1"
#text/html; charset="iso-8859-15"
#text/html; charset="iso-8859-2"
#text/html; charset="iso-88592"
#text/html; charset="iso-8859-3"
#text/html; charset="iso-8859-4"
#text/html; charset="iso-8859-5"
#text/html; charset="koi8-r"
#text/html; charset="ks_c_5601-1987"
#text/html; charset="printable-ascii"
#text/html; charset="unicode"
#text/html; charset="US-ASCII"
#text/html; charset="us-ascii"
#text/html; charset="UTF-16"
#text/html; charset="utf-16"
#text/html; charset="UTF-8"
#text/html; charset="utf-8"
#text/html; charset="windows-1250"
#text/html; charset="windows-1251"
#text/html; charset="Windows-1252"
#text/html; charset="windows-1252"
#text/html; charset="windows-1253"
#text/html; charset="windows-1254"
#text/html; charset="windows-1255"
#text/html; charset="windows-1256"
#text/html; charset="windows-1257"
#text/html; charset="windows-1258"
#text/html; charset="x-user-defined"
#text/plain
#text/plain; charset="ASCII"
#text/plain; charset="ascii"
#text/plain; charset="big5"
#text/plain; charset="euc-kr"
#text/plain; charset="gb2313"
#text/plain; charset="iso-2022-jp"
#text/plain; charset="ISO-8859-1"
#text/plain; charset="iso-8859-1 "
#text/plain; charset="iso-8859-1"
#text/plain; charset="ISO-8859-15"
#text/plain; charset="iso-8859-15"
#text/plain; charset=ISO-8859-1;format=flowed
#text/plain; charset="iso-8859-2"
#text/plain; charset="iso-8859-5"
#text/plain; charset="koi8-r"
#text/plain; charset="US-ASCII"
#text/plain; charset="us-ascii"
#text/plain; charset="utf-7"
#text/plain; charset="UTF-8"
#text/plain; charset="utf-8"
#text/plain; charset="windows-1200"
#text/plain; charset="windows-1250"
#text/plain; charset="windows-1251"
#text/plain; charset="Windows-1252"
#text/plain; charset="windows-1252"
#text/plain; charset="windows-1253"
#text/plain; charset="windows-1254"
#text/plain; charset="windows-1255"
#text/plain; charset="windows-1256"
#text/plain; charset="windows-1257"
#text/plain; charset="windows-1258"
#text/plain; charset="windows-874"
}

function rb.close_section {

	exec 7>&-								# Close old file (if any)

	if [[ "$output" ]] ; then

		printf "$ColourOn${BrightBlue}m%-${woutput}s $ColourOn${Green}m%-20s $ColourOn${Cyan}m%-20s$c0" "$output" "$charset" "$charcode"

		case "$charcode" in

		"utf8"|"utf-8")
			echo -en "$ColourOn${BrightGreen}m .${c0}"
			iconv -f utf-8 -t windows-1252 "$output" > "${output}.1252,"	# Convert old file unless it is the header.
			error="$?"
			if [ $error = 0 ] ; then
				echo -e "$ColourOn${BrightGreen}m OK.${c0}"
				mv "$output" "${output}.u"
			else
				echo -e "$ColourOn${BrightRed}m ERROR ($error).${c0}"
				mv "$output" "err-${error}-$output"
			fi
		;;

		""|"unknown"|"1200")
			echo -en "$ColourOn${Yellow}m ""!""${c0}"
			iconv -f windows-1252 "$output" > "${output}.u"	# Convert old file unless it is the header.
			error="$?"
			if [ $error = 0 ] ; then
				echo -e "$ColourOn${BrightGreen}m 1252 OK.${c0}"
			else
				echo -en "$ColourOn${BrightRed}m 1252 ERROR ($error).${c0}"
				rm "${output}.u"
				iconv -f utf-8 -t windows-1252 "$output" > "${output}.1252,"	# Convert old file unless it is the header.
				error="$?"
				if [ $error = 0 ] ; then
					echo -en "$ColourOn${BrightGreen}m utf-8 OK.${c0}"
					mv "$output" "${output}.u"
				else
					echo -en "$ColourOn${BrightRed}m utf-8 ERROR ($error).${c0}"
					mv "$output" "err-${error}-${charset}-$output"
				fi
				echo
			fi
		;;

		*)
			echo -en "$ColourOn${Brown}m "">""${c0}"
			iconv -f "$charset" "$output" > "${output}.u"	# Convert old file unless it is the header.
			error="$?"
			if [ $error = 0 ] ; then
				echo -e "$ColourOn${BrightGreen}m OK. ${c0}"
			else
				echo -e "$ColourOn${BrightRed}m ERROR ($error)${c0}"
				mv "$output" "err-${error}-${charset}-$output"
			fi
		;;
		esac
	fi
}

function rb.open_section {
	(( section++ ))
	output="${messagecount}-${section}-${content}-${charset}."
	exec 7>"$output"
	echo -e "$ColourOn${White}m:::MAILFILE:::${c0} $messagecount $section $ColourOn${BrightCyan}m$content${c0} $charset $description $ColourOn${Blue}m$f${c0}" >&7
	printf "%5s %s %-20s %-20s %s\n" "$messagecount" "$section" "$content" "$charset" "$description" "$f" >&8
}

function rb.parse { # separate name from value using specified character, and also remove all occurances of up to two other characters.

	pchr="$1"
	line="_$value"
	 name=$(echo "${line:1}" | sed 's/'"$pchr"'/\x01/ ; s/\x01.*//')
	value=$(echo "${line:1}" | sed 's/'"$pchr"'/\x01/ ; s/.*\x01[[:space:]]*//')
}

function rb.write_messageline {
	#printf "$ColourOn${White}m%-${wname}s$ColourOn${Cyan}m::${c0} %s\n" "$name" "$value" >&7
	echo "$linein" >&7
}

function rb.get_charset {
	charset=$(echo "$value" | sed 's/^.*charset='\"'\([^'\"']*\)'\"'.*$/\1/ ; s/[;\/'\"\'']//g')
}

function rb.get_charcode {

	(( charcodec["${charset,,*}"]++ ))
	charcode="${charcodea[$(echo "${charset,,*}" | sed 's/[^[:alnum:]]//g')]}"
	[[ $charcode ]] || charcode='unknown'
	description="${chardesc[$charcode]}"
	if [ $? != 0 ] ; then
		alert error "Description for $charset ($charcode) not found."
		description=unknown
	fi
}

function rb.new_section {
	rb.close_section
	rb.get_charset				# First try for charset.
	rb.get_charcode				# Get charcode and description from first try.
	rb.open_section
}

function rb.process_line {

	rb.parse ':' # gives vars: name, value

	rb.write_messageline

	case "${name,,*}" in

	'content-type')					# Header is Content-Type:

		rb.parse ';'

		content=$(echo "$name" | tr '/;' '__')

		case "$content" in

		'multipart_mixed')

			:
		;;

		'text_plain'|'text_calendar'|'text_html')			# Content-Type is either text or calendar.

			rb.new_section
		;;

		'application_octet-stream')

			echo "$output $content $f" >&8

			rb.close_section

			continue=				# Hopefully, this should cause us to go to the next e-mail file.
			exec 3<&-				# Hopefully, this should cause us to go to the next e-mail file.
			alert info "Closed e-mail file $f"
		;;

		*) #'multipart_alternative'|'multipart_report'|'message_rfc822')

			:
		;;

		esac
	esac
}

function rb.readlines {

	rb.reset
	rb.open_section

#	while [[ $continue ]] ; do
#		read value

	while read linein ; do

		(( linecount++ ))

		value="$linein"

		a=( $value ) # only for purposes of detecting a blank line
		if [ ${#a} != 0 ] ; then
			rb.process_line
		fi
	done
}

function rb.readfiles {
	messagecount=
	while read f ; do
		(( messagecount++ ))
		exec 3<"$f"
		echo -e "$ColourOn${White}m$f${c0}"
		rb.readlines <&3
		rb.close_section
		cat "${messagecount}-"*"-"*.u > "${messagecount}.n"
		progress
		echo
	done
}

function rb.main {
	exec 8>"$log"
	rb.setup_charcodes
	m._findmail "$input" .m
	start 			# sets up exec 6<"$input" and progress meter
	rb.readfiles <&6
	cat *.n > mail.converted.n
}

rb.main
echo >&2		# Tidy up after progress meter.

m.readmail ".m" 		# optional; reads headers raw from unconverted e-mail files.
