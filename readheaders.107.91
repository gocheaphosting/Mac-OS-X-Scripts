#!/bin/bash

. "${HOME}/bin/general_header"

sender_search="$1"

pmsgfile=yes
pmsgonly= # set to blank to print all headers and message lines
#pmsgonly=yes # set to non-blank to print no headers and only message lines

# Globals:

declare -a a b address list afrom aorgname alocname to
declare -A fromc from2c surnamec surname2c charcodec charsetc charcodea orgnamec locnamec orgname2c locname2c toc tomc toorgc tolocc chardesc placesc messageidc subjectsc subjc
state=
machine=
id=
value=
mode=
oldmode=
from=
from1=
from2=
addr=
org=
loc=
topos=
lstc=
sent=
date=
datestr=
subject=
subject1=
subject2=
subj1=
subj2=
content=
charset=
description=
content1=
charset1=
description1=
content2=
charset2=
description2=
total=
newname=
message=
messageid=
messageid1=
messageid2=
print_out=yes
f=
AP=
FBN=
APFN=
LineColour=

# Constants:

declare -a surnames
if [ -f senders ] ; then
	while read -a l ; do
		(( i++ ))
		surnames[$i]="${l[0],,*}"
	done < senders
fi
message_line_limit=40
w0printvar=10
para_sep=' // '
shortline='----------'
LineColour_default="$Blue"
DropColour="$Grey"
MessageColour="$Yellow"
cmsgid="$ColourOff$ColourOn${Blue}m"
cmsgid2="$ColourOff$ColourOn${Blue}m"
cdate="$ColourOff$ColourOn${BrightBlue}m"
crdate="$ColourOff$ColourOn${Blue}m"
cfrom="$ColourOff$ColourOn${BrightGreen}m"
cfr2="$ColourOff$ColourOn${Green}m"
corg="$ColourOff$ColourOn${BrightPurple}m"
cloc="$ColourOff$ColourOn${Brown}m"
csub="$ColourOff$ColourOn${Yellow}m"
csub2="$ColourOff$ColourOn${Brown}m"
cre="$ColourOff$ColourOn${BrightRed}m"
cto="$ColourOff$ColourOn${BrightCyan}m"
cmess="$ColourOff$ColourOn${MessageColour}m"
ccode="$ColourOff$ColourOn${Cyan}m"
cnfile="$ColourOff$ColourOn${Grey}m"
cfile="$ColourOff$ColourOn${White}m"
coff="$ColourOff"
c0="$ColourOff"
date_default=nodate.----
sed_split='s/^\(.*\) \/\+ .*/\1/g'
sed_printable='s/\([[:print:]]\+\)/\1 /g'
sed_nopunct='s/[[:punct:]]\+/ /g'
sed_noquestion='s/^[=?].*//g'
nore=': na ; 1 s/^\([rR][eE]:\|[fF][wW]:\|[tT][rR]:\|SUBJ:\)[[:space:]]\+// ; t na'
noooo='s/.*Out of [oO]ffice.*/autoreply/'
sed_condense=':cona;s/[[:space:]][[:space:]]\+/ /g;tcona'
sed_strip=':bstr;s/^[[:space:]]\+//;tbstr; :cstr;s/[[:space:]]\+$//;tcstr'
#subjectsrch="$sed_split ; $sed_printable ; $nopunct ; $noquestion ; $nore ; $noooo ; $sed_condense ; $sed_strip"
subjectsrch="$sed_split ; $nore ; $noooo"
nodays='s/[MTWFS][oOuUeEhHrRaA][nNeEdDuUiItT][a-zA-Z]*\([dD][aA][yY]\)\?//'
nofill='s/ - / /g'
nocommas='s/,/ /g'
fixspace='s/[[:space:]]\+/ /g'
switch='s/[[:space:]]*\([0-9]\+\)[^[:alnum:]]*\([JFMASOND][aAeEpPuUcCoO][nNbBrRyYlLgGpPtTvVcC][a-zA-Z]*\)/\2 \1/'
fillcentury20='s/\([JFMASOND][a-z]*[[:space:]]\+[0-9]\+[[:space:]]\+\)\([0][0-9][[:space:]]\+\)/\1 20\2/'
fillcentury19='s/\([JFMASOND][a-z]*[[:space:]]\+[0-9]\+[[:space:]]\+\)\([89][0-9][[:space:]]\+\)/\1 19\2/'
fix1='s/[-]Dec[[:space:]]\+\([019]\)/-\1/'
fix2='s/\([[:space:]]\)\(2|1[2-9]\):/\1\2:/;s/\.$//;s/\([[:space:]]*[[:punct:]]\?[gG][mM][tT][[:punct:]]\?\)$//'
sentsrch="$nocommas ; $nodays ; $nofill ; $fixspace ; $switch ; $fillcentury19 ; $fillcentury20 ; $fix1 ; $fix2"
alert_fmt="$ColourOn${Red}m%-9s $ColourOn${Cyan}m%-30s $ColourOn${Red}m%s $ColourOn${BrightRed}m%s$ColourOff"
#printval_fmt="$ColourOn${Black}m%-9s$ColourOff $ColourOn${Black}m%-30s$ColourOff $ColourOn${White}m%21s$ColourOff $ColourOn${Green}m%s$ColourOff$ColourOn${Red}m<$ColourOff"
#printval_fmt="$ColourOn${Black}m%-9s$ColourOff $ColourOn${Black}m%-30s$ColourOff $ColourOn${White}m%21s$ColourOff $ColourOn${BrightGreen}m%s$ColourOff$ColourOn${Red}m<$ColourOff"
#printval_fmt="$ColourOn${Black}m%s%s$ColourOn${White}m%21s$ColourOff $ColourOn${BrightGreen}m%s$ColourOff$ColourOn${Red}m<$ColourOff"

#printval_fmt="$ColourOn${White}m%21s$ColourOff $ColourOn${BrightGreen}m%s$ColourOff$ColourOn${Red}m<$ColourOff"
alert_type=short

# Functions:

function reset_vars {
	unset to toorg toloc
	oldmode=
	declare -A to toorg toloc
	#thisfile1="$thisfile"
#thisfile=resetvars
	lineacount=
	state=main
	fromfound=no
	subjectfound=no
	datefound=no
	contentfound=no
	machine=
	from=
	from1=
	from2=
	re=
	mode=
	lstc=0
	sent=
	date=
	datestr=
	refdate=
	subject=
	subject1=
	subject2=
	str=
	mode=
	oldmode=
	content=
	content1=
	content2=
	charsetstr=
	charset=
	charset1=
	charset2=
	charcode=
	charcode1=
	charcode2=
	description=
	description1=
	description2=
	message=
	messageid=
	messageid1=
	messageid2=
	type=
	all_done='?'
#thisfile="$thisfile1"
}

function detect {
	#printval "name" "$name"
	#printval "line" "${a[*]}"
	#printval "detect" "$1"
	#printval "detect" "$2"
	case "$1" in
	name)
		echo "$name" | sed 's/^.*\('"$2"'\).*$/\1/ ; ta ; s/.*// ; :a'
	;;
	line)
		echo "${a[*]}" | sed 's/^.*\('"$2"'\).*$/\1/ ; ta ; s/.*// ; :a'
	;;
	value)
		echo "${a[@]:1}" | sed 's/^.*\('"$2"'\).*$/\1/ ; ta ; s/.*// ; :a'
	;;
	*)
		echo "${a[$1]}" | sed 's/^.*\('"$2"'\).*$/\1/ ; ta ; s/.*// ; :a'
	esac
}

function dumpline { # does a newline after printing
	[[ $print_out ]] && printf "$ColourOn${White}m%3s$ColourOff $ColourOn${BrightGreen}m%-1s$ColourOff $ColourOn${Cyan}m%-15s$ColourOff $ColourOn${LineColour}m%-15s$ColourOff\n" "$lineacount" "$all_done" "$state" "${a[*]}" >&2
	print_out=
}

function dumpline1 { # used for printing data after the end of the line. You need to do the newline manually before the next cycle.
	local b=( $@ ) # closes up spaces
	printf "$ColourOn${White}m%3s$ColourOff $ColourOn${BrightGreen}m%-1s$ColourOff $ColourOn${Cyan}m%-15s$ColourOff $ColourOn${LineColour}m%s $ColourOn${BrightGreen}m%s" "$lineacount" "$all_done" "$state" "${a[*]}" "${b[*]}">&2
	print_out=
	nl='\n'
}

function dumpvars {
	printval ----------------------------------------- --------------------------------------------
	printval 'Filename:' "$f"
	printval 'APFN:' "$APFN"
	printval 'AP:' "$AP"
	printval 'FBN:' "$FBN"
	printval '----------' '----------'
	printval 'Message ID:' "$messageid1"
	printval 'From:' "$from1"
	printval 'Surname:' "$surname1"
	printval 'Org:' "$orgname1"
	printval 'Location:' "$locname1"
	printval 'Date:' "$date"
	printval 'To:' "${to[*]}"
	printval 'Subject:' "$subject1"
	printval 'Subj:' "$subj1"
	printval 'Content-Type:' ">$content1 >$charset1 >$charcode1 >$description1"
	printval '----------' '----------'
	printval 'Message ID:' "$messageid2"
	printval 'Re:' ">${re}< $from2"
	printval 'Surname:' "$surname2"
	printval 'Org:' "$orgname2"
	printval 'Location:' "$locname2"
	printval 'Date:' "$refdate"
	printval 'Subject:' "$subject2"
	printval 'Subj:' "$subj2"
	printval 'Content-Type:' ">$content2 >$charset2 >$charcode2 >$description2"
	printval '----------' '----------'
	printval 'Newname:' "$newname"
}

function date_error {
	alert ERROR "DATE ERROR!"
	LineColour="$BrightRed"
#dumpline
	dumpvars
	cat "$f" >&2
}

function get_date {
	sent=$(echo "${a[@]:1}" | sed "$sentsrch")
	if ! [[ "$sent" ]] ; then
		sent=$(echo "${a[@]:1}" | sed "$datesrch")
	fi
	datestr=$(date -d "$sent" "+%y%m%d.%H%M")
#dumpline;#printval "Date:"  "$datestr"
}

function get_vdate {
	case "$name" in
	DTSTART)
		date_arg=2
	;;
	*)
		date_arg=1
	;;
	esac
	sent=$(echo "${a[$date_arg]}" | sed 's/^\(....\)\(..\)\(..\)T\(..\)\(..\)\(..\)Z$/\1-\2-\3 \4:\5:\6 +0000/')
	refdate=$(date -d "$sent" "+%y%m%d.%H%M")
}

function vparser {
	line=$(echo "${a[*]}" | tr ':;' ' ')
	a=( $line )
	name="${a[0]}"
}

function get_subject {
	value=$(echo "${a[*]:1}" | tr \' ' ' | tr \" ' ')
	#dumpline
	#printval Subject: "$value"
	if [ "x${value:0:2}" = 'x=?' ] ; then
		codepage=$(echo "${value:2}" | sed 's/?Q?.*//')
		#printval "codepage" "$codepage"
		str=$(echo "$value" | sed 's/^.*?Q?// ; s/?=.*$// ; s/_/ /g')
		#printval "str" "$str"
		case "${codepage,,*}" in
		8859-1|iso-8859-1)
			str=$(echo "$str" | sed 's/=28/(/g ; s/=29/)/g ; s/=3A/:/ ; s/=40/ /g ; s/=C9/E/ ; s/=E9/e/g')
		;;
		*)
			str=$(echo "$str" | sed 's/=../_/g')
		;;
		esac
		#printval "str" "$str"
		subject=$(echo "$str" | sed "$subjectsrch" )
	else
		subject=$(echo "$value" | sed "$subjectsrch" )
	fi
	! [[ "$subject" ]] && subject='-'
	subjarr=( $( echo "$subject" | tr ' ' '_' | tr ':' ' ' | tr ';' ' ' | tr '/' ' ') )
	(( ind = ${#subjarr[*]} - 1 ))
	subj=$(echo "${subjarr[$ind]}" | tr '_' ' ' | sed 's/^ //')
	! [[ "$subj" ]] && subj="$subject"
	(( subjectsc["$subject"]++ ))
	(( subjc["$subj"]++ ))
	#printval "Subject:" "$subject"
	#printval "Subj:" "$subj"
}

function vcard {
	vparser
	case "$name" in
		N )
			subject1=$(echo "${a[@]:1:2}" | sed 's/[^[:print:]]//g ; s/\\/~/g')
#dumpline;#printval "Subject:"  "$subject1"
			LineColour="$Red" ; all_done= ; state=done
		;;
		* )
			LineColour="$DropColour"
		;;
	esac
#dumpline
}

function vjournal {
	vparser
	case "$name" in
	CREATED)
		get_vdate
#dumpline;#printval "Date:"  "$refdate"
		re="J"
	;;
	LAST-MOD)
		get_vdate
#dumpline;#printval "Date:"  "$date"
	;;
	SUMMARY)
		value=$(echo "${a[*]:2}" | sed 's/[^[:print:]]//g ; s/\\/~/g')
		get_subject
		subject2="-created- $subject"
		subject1="-updated- $subject"
		LineColour="$Red" ; all_done= ; state=done
		subj=$(echo "$subject" | sed 's/.*~//g ; s/[[:punct:]]\+/-/g')
		! [[ $subj ]] && subj='-'
		(( subjectsc["$subj"]++ ))
#dumpline;#printval "$refdate" "$subject2" ;#printval "$date" "$subject"
	;;
	*)
		LineColour="$DropColour"
#dumpline
	;;
	esac
}

function vevent {
	vparser
	case "$name" in
#	xxxORGANIZER)
#		oldmode=
#		mode="Organizer:"
#		value="${a[*]:1}"
#		#dumpline
#	#printval "value" "$value"
#		get_address
#	#printval "Organizer:" "$addr $org $loc"
#		if [[ $from1 ]] ; then
#			from2="$addr"
#			orgname2="$org"
#			locname2="$loc"
#			[[ "$from2" ]] || from2='-'
#			[[ "$orgname2" ]] || orgname2='-'
#			[[ "$locname2" ]] || locname2='-'
#			ind="$from2 $orgname2 $locname2"
#		#printval "ind" "$ind"
#			(( from2c["$ind"]++ ))
#		#printval "from2c" "${#from2c[*]}"
#			(( orgname2c["$orgname2"]++ ))
#			(( locname2c["$locname2"]++ ))
#		else
#			from1="$addr"
#			orgname1="$org"
#			locname1="$loc"
#			[[ "$from1" ]] || from1='-'
#			[[ "$orgname1" ]] || orgname1='-'
#			[[ "$locname1" ]] || locname1='-'
#			ind="$from1 $orgname1 $locname1"
#		#printval "ind" "$ind"
#			(( fromc["$ind"]++ ))
#		#printval "fromc" "${#fromc[*]}"
#			(( orgnamec["$orgname1"]++ ))
#			(( locnamec["$locname1"]++ ))
#		fi
#	;;
	SUMMARY)
		get_subject
		if [[ $place ]] ; then
			subject2="$subject1"
		elif [[ $subject ]] ; then
			subject2="$subject"
		else
			subject="Meeting"
			subject1="$subject"
			subject2="$subject"
		fi
#		re="+"
#		from2="${to[1]:1}"
	;;
	DTSTART)
		get_vdate
		#from2="$from1"
		from2="Meeting"
#		case "$method" in
#		REQUEST)
#			:
#		;;
#		*)
#			if [ "$lstc" -gt 3 ] ; then
#				:
#			else
#				re="+"
#			fi
#		;;
#		esac
		subject2="$subject2 (Date: $refdate)"
		subject1="$subject1 (Date: $refdate)"
		LineColour="$Red" ; all_done= ; state=done
	;;
	*)
		LineColour="$DropColour"
#dumpline
	;;
	esac
}

function check_content {
	content="${a[1]}"
	description=
	case "$content" in
	'text/plain;')
		case "$state" in
		content)
			state=message
			charset=$(echo "${a[*]:2}" | sed 's/^.*charset='\"'\(.*\)'\"'.*$/\1/')
			if [[ $charset ]] ; then
				(( charcodec["${charset,,*}"]++ ))
				charcode="${charcodea[$(echo "${charset,,*}" | sed 's/[^[:alnum:]]//g')]}"
				description="${chardesc[$charcode]}"
				if [ $? != 0 ] ; then
					description=unknown
				fi
			fi
		;;
		*)
			LineColour="$Red" ; all_done= ; state=done
		;;
		esac
	;;
	'text/calendar;')
		state=vevent
		charset=$(echo "${a[*]:2}" | sed 's/^.*charset='\"'\(.*\)'\"'.*$/\1/')
		if [[ $charset ]] ; then
			(( charcodec["${charset,,*}"]++ ))
			charcode="${charcodea[$(echo "${charset,,*}" | sed 's/[^[:alnum:]]//g')]}"
			description="${chardesc[$charcode]}"
			if [ $? != 0 ] ; then
				description=unknown
			fi
		fi
	;;
	*)
		state=content
		charset=
	;;
	esac
#dumpline;#printval "Content:"  "$content $charset $description"
}

function check_address {
	local nam=( ${addr} )
	local fr="${nam[0]}"
	#printval "fr" "$fr"
	if [ "x${fr:0:3}" = "xChr" ] ; then
		if [ "x${fr: -4}" = "xtien" ] ; then
			fr=Chretien
		fi
	elif [ "x${fr:0:1}" = "xL" ] ; then
		if [ "x$(echo "$fr" | sed 's/.*gar.*/gar/')" = "xgar" ] ; then
			fr=Legare
		fi
	elif [ "x${fr:0:4}" = "xLabb" ] ; then
			fr=Labbe
	elif [ "x${fr:0:3}" = "xPar" ] ; then
			fr=Pare
	fi
	#printval "fr" "$fr"
	nam[0]="$fr"
	addr="${nam[*]}"
}

function get_address {
	if [ "x${value:0:2}" = 'x=?' ] ; then
		str=$(echo "$value" | sed 's/^.*?Q?// ; s/?=.*$// ; s/=E9/e/g ; s/=40/ /g ; s/=28/(/g ; s/=29/)/g')
		address=( $str )
		addr=$(echo "${address[0]}" | tr '_ ' ' ')
		org=$(echo "${address[1]}" | tr '_ ' ' ')
		loc=$(echo "${address[2]}" | tr '_ ' ' ')
	else
		str=$(echo "$value" | sed 's/[@<>\['\"\'']/ /g ; s/\]/ /')
		#printval "str" "$str"
		address=( $str )
		#printval "address" "${address[*]}"
		addr="${address[0]}"
		#printval "addr" "$addr"

		#str=$(echo "$str1" | sed 's/@/ :/g ; s/\]/ /g ; s/>//g')
		#printval "str" "$str"
		#address=( $str )
		#printval "address" "${address[*]}"
		#org1="${address[1]}"
		#printval "org1" "$org1"
		#loc1="${address[2]}"
		#printval "loc1" "$loc1"

		#str=$(echo "$org1" | sed 's/\(_\)*[@<\['\"\'']\(_\)*/ :/g')
		#printval "str" "$str"
		#address=( $str )
		#printval "address" "${address[*]}"
		#org="${address[0]}"
		org="${address[1]}"
		#printval "org" "$org"

		#str=$(echo "$loc1" | sed 's/\(_\)*[@<\['\"\'']\(_\)*/ :/g')
		#printval "str" "$str"
		#address=( $str )
		#printval "address" "${address[*]}"
		#loc="${address[0]}"
		loc="${address[2]}"
		#printval "loc" "$loc"

		#addr=$(echo "${addr:1}" | sed 's/_/ /g')
		#printval "addr" "$addr"
		#check_address
		#printval "checked addr" "$addr"
		#org=$(echo "${org:1}" | sed 's/_/ /g ; s/[>.,:;'\"\'']\+$//')
		#printval "org" "$org"
		#loc=$(echo "${loc:1}" | sed 's/_/ /g')
		#printval "loc" "$loc"

	fi
	if [ "x$loc" = "x$org" ] ; then
		loc=
	fi
	[[ $org ]] || org='-'
	[[ $loc ]] || loc='-'
	if [ "x$mode" != "x$oldmode" ] ; then
		#dumpline;printval "$mode" "$addr >$org >$loc"
		oldmode="$mode"
	else
		:
		#printval "" "$addr >$org >$loc"
	fi
}

function get_list {
	local lst= index= value=
	local -a list
	if [ "$mode" != "$oldmode" ] ; then
		index=$lstc
		to["$index"]="$mode"
		(( lstc = index + 1 ))
	fi
	local str=$(echo "${a[@]:$topos}" | sed 's/ /_/g ; s/;_/ /g')
	list=( $str )
	for (( lst = 0 ; lst < ${#list[*]} ; lst++ )) ; do
		value="${list[$lst]}"
		(( index = lstc + lst))
		get_address
		to[$index]="$addr"
		toorg[$index]="$org"
		toloc[$index]="$loc"
		if [[ "$addr" ]] ; then
			(( toc["$addr"]++ ))
			(( tomc["$mode $addr"]++ ))
			(( toorgc["$org"]++ ))
			(( tolocc["$loc"]++ ))
		fi
	done
	(( lstc = index + 1 ))
}

function headers {
	name="${a[0]}"
	case "${name,,*}" in
	'from:'|'de:')
		oldmode=
		mode="$name"
		value=$(echo "${a[*]:1}" | tr ' ' '_')
		#dumpline
		get_address
		#if [[ "$sender_search" ]] ; then
		#	continue=$(echo "$addr" | grep -e "$sender_search")
		#else
		#	continue=yes
		#fi
		#if [[ $continue ]] ; then
			#printval "" "$addr"
			#if ! [[ "$type" ]] ; then
			#	type=regular
			#fi
			#if [[ "$from1" ]] ; then
			#	state=ref
			#	#alert state ref
			#fi
			case "$state" in
			main|continue)
				from1="$addr"
				surnamea=( $(echo "$addr" | tr '_' ' ') )
				surname1="${surnamea[0]}"
				orgname1="$org"
				locname1="$loc"
				[[ "$from1" ]] || from1='-'
				[[ "$surname1" ]] || surname1='-'
				[[ "$orgname1" ]] || orgname1='-'
				[[ "$locname1" ]] || locname1='-'
				ind="$from1 $orgname1 $locname1"
				(( fromc["$ind"]++ ))
				(( surnamec["$surname1"]++ ))
				(( orgnamec["$orgname1"]++ ))
				(( locnamec["$locname1"]++ ))
				DotColour="$cfrom"
			;;
			ref)
				mode="Re:"
				re="<"
				from2="$addr"
				surnamea=( $(echo "$addr" | tr '_' ' ') )
				surname2="${surnamea[0]}"
				orgname2="$org"
				locname2="$loc"
				[[ "$from2" ]] || from2='-'
				[[ "$orgname2" ]] || orgname2='-'
				[[ "$locname2" ]] || locname2='-'
				ind="$from2 $orgname2 $locname2"
				(( from2c["$ind"]++ ))
				(( surname2c["$surname2"]++ ))
				(( orgname2c["$orgname2"]++ ))
				(( locname2c["$locname2"]++ ))
		DotColour="$cfrom"
			;;
			*)
				:
			;;
			esac
		#else
		#	state=done
		#fi
	;;
	"to:"|"cc:"|"bcc:")
		oldmode=
		mode="$name"
		#dumpline
		#if [ "$lstc" -gt "0" ] ; then
		#	state=ref
		#	#alert state ref
		#fi
		case "$state" in
		main|continue)
			topos=1
			get_list
		DotColour="$cto"
		;;
		*)
			:
		;;
		esac
	;;
	\"*)
		mode="$oldmode"
		#dumpline
		case "$state" in
		main|continue)
			topos=0
#dumpline
			get_list
		DotColour="$cto"
		;;
		*)
			:
		;;
		esac
	;;
	"sent:"|"date:")
		get_date
		case "$state" in
		main|continue)
			date="$datestr"
		DotColour="$cdate"
		;;
		ref)
			refdate="$datestr"
			re="<"
		DotColour="$cdate"
		;;
		*)
			:
		;;
		esac
	;;
	"subject:"|'sujet:')
		get_subject
		case "$state" in
		main|continue)
			if [ "x$(echo "$subject" | grep -i bulk)" != "x" ] ; then
				from1=bulk
				subject1=bulk
				LineColour="$Red" ; all_done= ; state='done'
			else
				subject1="$subject"
				subj1="$subj"
			fi
		DotColour="$csub"
		;;
		ref)
			subject2="$subject"
			subj2="$subj"
			re="<"
			LineColour="$Red" ; all_done= ; state='done'
		DotColour="$csub"
		;;
		*)
			:
		;;
		esac
	;;
	"content-type:")
		case "$state" in
		main)
			check_content
		DotColour="$ccode"
		;;
		content)
			check_content
			content1="$content"
			charset1="$charset"
			charcode1="$charcode"
			description1="$description"
		DotColour="$ccode"
		;;
		message)
			check_content
			content2="$content"
			charset2="$charset"
			charcode2="$charcode"
			description2="$description"
		DotColour="$ccode"
		;;
		*)
			LineColour="$Red" ; all_done= ; state=done
		;;
		esac
	;;
	'message-id:')
		messageid=$(echo "${a[@]:1}" | sed 's/[[:space:]]\+//g')
		(( messageidc[$messageid]++ ))
#dumpline;#printval "Message-ID:"  "$messageid"
		case "$state" in
		main|continue)
			messageid1="$messageid"
		DotColour="$cmsgid"
		;;
		ref)
			messageid2="$messageid"
			re="<"
		DotColour="$cmsgid"
		;;
		*)
			:
		;;
		esac
	;;
	'-----'|'-----original'|'----original')
		case "$state" in
		main|continue|content|message)
			state=ref
			DotColour="$cloc"
		;;
		*)
			LineColour="$Red" ; all_done= ; state=done
		;;
		esac
	;;
	'begin:vcard')
		if ! [[ "$from1" ]] ; then
			from1=vcard
		else
			(( fromc[vcard]++ ))
		fi
		date="$date_default"
		state=vcard
		DotColour="$cfile"
#dumpline
	;;
	'begin:vjournal')
		from1=vjournal
		state=vjournal
		(( fromc[vjournal]++ ))
		DotColour="$cfile"
#dumpline
	;;
	'begin:vevent')
		if ! [[ "$from1" ]] ; then
			from1=vevent
		else
			(( fromc[vevent]++ ))
		fi
		state=vevent
		DotColour="$cfile"
#dumpline
	;;
	''|'when:')
		:
	;;
	'where:')
		place="${a[@]:1}"
#dumpline;#printval "Location:"  "$place"
		if ! [[ $subject ]] ; then
			subject="Meeting at $place"
		fi
		if [[ $subject1 ]] ; then
			subject1="$subject1 (Location: $place)"
		else
			subject1="$subject"
		fi
		(( placesc["$place"]++ ))
		DotColour="$cfile"
	;;
	method)
		method="${a[@]:1}"
		DotColour="$cfile"
	;;
	*)
		case "$state" in
		main|content|ref|continue)
			DotColour="$cnfile"
#dumpline
		;;
		message)
			DotColour="$cloc"
#			[[ $pmsgfile ]] && [[ $pmsgonly ]] && echo "${a[*]}" >&9 # use this line if you only want the message part.
#dumpline
		;;
		esac
		:
	;;
	esac
}

function state_machine {
	print_out=yes
	LineColour="$LineColour_default"
	case "$state" in
		vcard	) vcard		;;
		vjournal) vjournal	;;
		vevent	) vevent	;;
		done	) LineColour="$DropColour"
			  print_out=
			  all_done=
		;;
		*) headers	;;
	esac
#	[[ $print_out ]] &&#dumpline
#	printf "$nl" >&2
#	nl=
#	[[ $pmsgfile ]] && ! [[ $pmsgonly ]] && echo "${a[*]}" >&9 # use this line if you only want the message part.
}

function printvar {
	local name="$1"
	local val="${!name}"
	printf "%-15s: %s" "${name^*}" "$val"
	shift
	while [[ "$1" ]] ; do
		name="$1"
		val="${!name}"
		printf " %s" "$val"
		shift
	done
	echo
}

function printarrayv {
	shift
	local -a val
	local i name="$1"
	val=( ${!name[$i]^*} )
	if [[ $val ]] ; then
		printf "%-15s %s\n" "${name^*}:" "${val[*]}"
		for (( i = 1 ; i < ${#name} ; i++ )) ; do
			val="${!name[$i]}"
			printf "%-15s  %s\n" "" "${val[*]}"
		done
	fi
}

function writemail {
	printvar from1 orgname1 locname1 content1 charset1 charcode1 description1 f
	printvar date
	printarrayv to
	printvar subject1
	printvar re refdate from2 orgname2 locname2 content2 charset2 charcode2 description2 subject2
	#echo
	#cat "$f" | grep -Ev "(^[[:space:]]\+$)|(^[[:graph:]]\+$)|(^[A-Z][a-z]\+[-[:alnum:]]\+:)"
}

function outputs {
	namarr=( $subject1 )
	newname=$(echo "${date}-${surname1}-${namarr[@]:0:4}" | tr ' ' '_')
	subject1=$(echo "$subject1" | tr ' ' '_')
	subj1=$(echo "$subj1" | tr ' ' '_')
	subject2=$(echo "$subject2" | tr ' ' '_')
	subj2=$(echo "$subj2" | tr ' ' '_')
	! [[ $messageid2 ]] && messageid2='-'
	#echo Newname calculated.
	#dumpvars
	#msg2=" "$(printf "${cmsgid}Message ID: %s ${cdate}Date: %s ${cfrom}From: %s (%s) ${corg}Org: %s ${cloc}Location: %s ${ccode}Content-Type: %s ${csub}Subject: %s (%s) ${cto}To: %s ${cre}>%s< ${cmsgid2}Message ID: %s ${crdate}Date: %s ${cfr2}From: %s (%s) ${corg}Org: %s ${cloc}Location: %s ${ccode}Content-Type: %s ${csub2}Subject: %s (%s) ${cnfile}Newname: %s ${cfile}Filename: %s" \
	#"$messageid1" "$date" "$surname1" "$from1" "$orgname1" "$locname1" ">$content1 >$charset1 >$charcode1 >$description1" "$subject1" "$subj1" "${to[*]}" "$re" "$messageid2" "$refdate" "$surname2" "$from2" "$orgname2" "$locname2" ">$content2 >$charset2 >$charcode2 >$description2" "$subject2" "$subj2" "$newname" "$f")
	db1="_$messageid1 _$date _$surname1 _$from1 _$orgname1 _$locname1 _$content1 _$charset1 _$charcode1 _$description1 _$subject1 _$subj1"
	db2=$(echo "_${to[*]}" | tr ' ' '@')
	db3="_$re"
	db4="_$messageid2 _$refdate _$surname2 _$from2 _$orgname2 _$locname2 _$content2 _$charset2 _$charcode2 _$description2 _$subject2 _$subj2"
	db5="_$newname _$f"
	#printvar "db1" "$db1"
	#printvar "db2" "$db2"
	#printvar "db3" "$db3"
	#printvar "db4" "$db4"
	#printvar "db5" "$db5"
	echo "$db1 $db2 $db3 $db4 $db5" >&7
	if [[ $re ]] ; then
		echo "$db4 _- _> $db1 $db5" >&7
	fi
	#gfp_info "$f"
	#echo ln -s \""$f"\" \""$AP/$newname"\"
	. "${bin}/show-progress"
	#echo >&2
#	echo -e "$ColourOff$ColourOn${Yellow}m$message\n\n"
	#writemail >&8
}

function output_list {
	local -a list
	local i title file num maxn=0 maxc=0 str
	title="$1"
	file=$(echo "${title,,*}" | sed 's/[[:space:]]\+/_/')
	rm "${file}.tmp" 2>/dev/null
	shift
	list=( "$@" )
	(( num = $# / 2 ))
	for (( i = 0 ; i < num ; i++ )) ; do
		if [ "$maxc" -lt "${#list[$i]}" ] ; then
			maxc=${#list[$i]}
		fi
		if [ "$maxn" -lt "${#list[(( num + i ))]}" ] ; then
			maxn=${#list[(( num + i ))]}
		fi
	done
	echo
	echo -e "$ColourOn${White}m${title}: $num$ColourOff"
	echo
	for (( i = 0 ; i < num ; i++ )) ; do
		nam=$(echo "${list[$(( num + i))]}" | sed ':a ; s/\(,,\)\? \+/_/g ; ta')
		printf "%-${maxn}s  %${maxc}s\n" "$nam" "${list[$i]}" >> "${file}.tmp"
	done
	2>/dev/null cat "${file}.tmp" | align | sort | sed 's/_/ /g' > "${file}"
	2>/dev/null cat "${file}"
}

# Init:

         charcodea[ascii]=ascii	; chardesc[ascii]="ASCII"	;
       charcodea[usascii]=ascii
charcodea[printableascii]=ascii	;
          charcodea[utf7]=utf7	; chardesc[utf7]="Unicode"	;
          charcodea[utf8]=utf8	; chardesc[utf8]="Unicode"	;
         charcodea[utf16]=utf16	; chardesc[utf16]="Unicode"	;
         charcodea[utf16be]=utf16be	; chardesc[utf16be]="Unicode"	;
         charcodea[utf16le]=utf16le	; chardesc[utf16le]="Unicode"	;
       charcodea[unicode]=unicode; chardesc[unicode]="Unicode"	;
       charcodea[so88591]=88591	; chardesc[88591]="Western"	; # this one is to catch an anomaly seen in the input
      charcodea[iso88591]=88591	; chardesc[88591]="Western"	;
      charcodea[iso88592]=88592	; chardesc[88592]="Central"	;
      charcodea[iso88593]=88593	; chardesc[88593]="Turkish"	;
      charcodea[iso88594]=88594	; chardesc[88594]="Baltic"	;
      charcodea[iso88595]=88595	; chardesc[88595]="Cryllic"	;
      charcodea[iso88596]=88596	; chardesc[88596]="Arabic"	;
      charcodea[iso88597]=88597	; chardesc[88597]="Greek"	;
      charcodea[iso88598]=88598	; chardesc[88598]="Hebrew"	;
      charcodea[iso88599]=88599	; chardesc[88599]="Turkish"	;
     charcodea[iso885910]=885910; chardesc[885910]="Nordic"	;
     charcodea[iso885911]=885911; chardesc[885911]="Thai"	;
     charcodea[iso885912]=885912; chardesc[885912]="Devengari"	;
     charcodea[iso885913]=885913; chardesc[885913]="Baltic"	;
     charcodea[iso885914]=885914; chardesc[885914]="Celtic"	;
     charcodea[iso885915]=885915; chardesc[885915]="Western"	;
     charcodea[iso885916]=885916; chardesc[885916]="Southern"	;
    charcodea[windows874]=874	; chardesc[874]="Thai"	;
   charcodea[windows1200]=1252
   charcodea[windows1250]=1250	; chardesc[1250]="European"	;
   charcodea[windows1251]=1251	; chardesc[1251]="Cryllic"	;
   charcodea[windows1252]=1252	; chardesc[1252]="Western"	;
   charcodea[windows1253]=1253	; chardesc[1253]="Greek"	;
   charcodea[windows1254]=1254	; chardesc[1254]="Turkish"	;
   charcodea[windows1255]=1255	; chardesc[1255]="Hebrew"	;
   charcodea[windows1256]=1256	; chardesc[1256]="Arabic"	;
   charcodea[windows1257]=1257	; chardesc[1257]="Baltic"	;
   charcodea[windows1258]=1258	; chardesc[1258]="Vietnam"	;
          charcodea[big5]=big5	; chardesc[big5]="Taiwan"	;
         charcodea[euckr]=euckr	; chardesc[eukcr]="Korean"	;
         charcodea[eucjp]=eucjp	; chardesc[eukjp]="Japanese"	;
        charcodea[gb2312]=2312	; chardesc[2312]="Chinese"	;
        charcodea[hzgb2312]=2312;
     charcodea[iso2022cn]=2022cn; chardesc[2022cn]="Chinese"	;
     charcodea[iso2022kr]=2022kr; chardesc[2022kr]="Korean"	;
     charcodea[iso2022jp]=2022jp; chardesc[2022jp]="Japanese"	;
         charcodea[koi8r]=koi8r	; chardesc[koi8r]="Cryllic"	;
         charcodea[koi8u]=koi8u	; chardesc[koi8u]="Ukrainian"	;
#x-euc-tw
#Shift_JIS
#x-mac-cyrillic
#IBM866
#IBM855
#TIS-620

find -type f | grep -Eiv "(junk)" | grep -E "(/[0-9]+$)" | sort > input
#find -type f | grep -Eiv "(junk)" | grep -E "(/[0-9]+.utf8$)" | sort > input.utf8
find -type f | grep -Ei "(junk)" | sort > junk

exec 7>db.tmp
exec 8>log.tmp

. "${bin}/start"

exec 6<input
#exec 6<input.utf8

#AP="${fileap}"
#APFN="${ap_with_basename}"
#FBN="${file_basename}"
# Main:
echo total=$total
while read f ; do
	(( ser++ ))
	exec 5<"$f"
	#gfp_info "$f"
	#exec 9>"${APFN}.msg.txt"
	reset_vars
	while read -a a ; do
		(( lineacount++ ))
		state_machine
		echo -en "${DotColour}*$ColourOff"
		[[ "$all_done" ]] || break
	done <&5
	exec 5<&-
	exec 9>&-
	#echo Saving message text...
	#mv -v "${APFN}.msg.txt" "${APFN}.${charset1}.msg.txt"
	#echo Converting message text...
	#iconv --verbose -c -f "$charset1" "${APFN}.${charset1}.msg.txt" > "${APFN}.locale.msg.txt"
	outputs
	#echo
	#echo Message Files:
	#ls -ltr "$APFN".*
	#break
done <&6

exec 6<&-
exec 7>&-
exec 8>&-

thisfile=tailend

echo

output_list "Message IDs" 			"${messageidc[@]}" 	"${!messageidc[@]}"

output_list "Senders" 				"${fromc[@]}" 		"${!fromc[@]}"
output_list "Organizations" 			"${orgnamec[@]}" 	"${!orgnamec[@]}"
output_list "Locations" 			"${locnamec[@]}" 	"${!locnamec[@]}"

output_list "Meeting Places" 			"${placesc[@]}" 	"${!placesc[@]}"

output_list "Forwarded From" 			"${from2c[@]}" 		"${!from2c[@]}"
output_list "Forwarded From Organizations" 	"${orgname2c[@]}" 	"${!orgname2c[@]}"
output_list "Forwarded From Locations" 		"${locname2c[@]}" 	"${!locname2c[@]}"

output_list "Recipients" 			"${toc[@]}" 		"${!toc[@]}"
output_list "Recipient Modes" 			"${tomc[@]}" 		"${!tomc[@]}"
output_list "Recipient Organizations" 		"${toorgc[@]}" 		"${!toorgc[@]}"
output_list "Recipient Locations" 		"${tolocc[@]}" 		"${!tolocc[@]}"
output_list "Subjects" 				"${subjectsc[@]}" 	"${!subjectsc[@]}"
output_list "Topics" 				"${subjc[@]}" 		"${!subjc[@]}"

output_list "Surnames" 				"${surnamec[@]}" 	"${!surnamec[@]}"

output_list "Character Encodings" 		"${charcodec[@]}" 	"${!charcodec[@]}"

echo

echo Sorting database...

cat db.tmp | sort > db.sort
cat db.sort | uniq -w 93 > db.uniq
cat db.sort | uniq -w 93 --all-repeated=separate > db.repeated
cat db.uniq | sort -k2 > input

rm db-* 2>/dev/null

cp input db3
. ${bin}/start
exec 6<input
exec 7>db

echo Preparing report...

while read -a a ; do
#	db1="_$messageid1 _$date _$from1 _$orgname1 _$locname1 _$content1 _$charset1 _$charcode1 _$description1 _$subject1"
#	db2=$(echo "_${to[*]}" | tr ' ' '@') # need to pack the addressees
#	db3="_$re"
#	db4="_$messageid2 _$refdate _$from2 _$orgname2 _$locname2 _$content2 _$charset2 _$charcode2_ $description2 _$subject2"
#	db5="_$newname _${f}<"
#	echo "$db1 $db2 $db3 $db4 $db5" >&7
#	if [[ $re ]] ; then
#		echo "$db4 $db2 _-> $db1 $db5" >&7
#	fi

# 	messageid date from orgname locname content charset charcode description subject
# 	to
# 	re	> ref is a response	< ref is the original	* ref is the original meeting"
# 	messageid refdate from orgname locname content charset charcode description subject
# 	newname f<

#	db1="_$messageid1 _$date _$surname1 _$from1 _$orgname1 _$locname1 _$content1 _$charset1 _$charcode1 _$description1 _$subject1 _$subj1"
#	db2=$(echo "_${to[*]}" | tr ' ' '@')
#	db3="_$re"

		  messageid1="${a[0]:1}"
			date="${a[1]:1}"
		    surname1="${a[2]:1}"
	        from1=$(echo "${a[3]:1}"  | tr '_' ' ')
	     orgname1=$(echo "${a[4]:1}"  | tr '_' ' ')
	     locname1=$(echo "${a[5]:1}"  | tr '_' ' ')
		    content1="${a[6]:1}"
		    charset1="${a[7]:1}"
		   charcode1="${a[8]:1}"
		description1="${a[9]:1}"
	     subject1=$(echo "${a[10]:1}"  | tr '_' ' ')
		subj1=$(echo "${a[11]:1}"  | tr '_' ' ')

	         to=( $(echo "${a[12]:1}" | tr '@' ' ') )

			j=0
			for t in "${to[@]}" ; do
				tos=( $(echo "$t" | tr '_' ' ') )
				to[$j]="${tos[0]}"
				(( j++ ))
			done

			  re="${a[13]:1}"

#	db4="_$messageid2 _$refdate _$surname2 _$from2 _$orgname2 _$locname2 _$content2 _$charset2 _$charcode2_ $description2 _$subject2 _$subj2"
#	db5="_$newname _$f"

		  messageid2="${a[14]:1}"
		     refdate="${a[15]:1}"
		    surname2="${a[16]:1}"
	        from2=$(echo "${a[17]:1}"  | tr '_' ' ')
	     orgname2=$(echo "${a[18]:1}"  | tr '_' ' ')
	     locname2=$(echo "${a[19]:1}"  | tr '_' ' ')
		    content2="${a[20]:1}"
		    charset2="${a[21]:1}"
		   charcode2="${a[22]:1}"
		description2="${a[23]:1}"
	     subject2=$(echo "${a[24]:1}"  | tr '_' ' ')
		subj2=$(echo "${a[25]:1}"  | tr '_' ' ')
		     newname="${a[26]:1}"
		    f=$(echo "${a[*]:27}" | sed 's/^_// ; s/<$//')

	#echo Entry:>&2
	#dumpvars

	naddr="${#to[*]}"
	if [ "$naddr" -gt 10 ] ; then
		to=( "To:" "$naddr" )
	fi

	m1=$(printf "${cmsgid}%s ${cdate}%s ${cfrom}%s ${corg}%s ${cloc}%s ${ccode}%s ${csub}%s ${cto}%s ${cre}%s ${cmsgid}%s ${crdate}%s ${cfr2}%s ${corg}%s ${cloc}%s ${ccode}%s ${csub2}%s ${cfile}%s" "$messageid1" "$date" "$surname1 $from1" "$orgname1" "$locname1" "$content1 $charset1 $charcode1 $description1" "$subject1 $subj1" "${to[*]}" "$re" "$messageid2" "$refdate" "$surname2 $from2" "$orgname2" "$locname2" "$content2 $charset2 $charcode2 $description2" "$subject2 $subj2" "$newname $f")

	case "$re" in
	'')
		m4=$(printf "${cdate}%-11s ${cfrom}%-35s ${csub}%s ${cto}%s ${cfile}%s" "$date" "$surname1" "$subject1" "${to[*]}" "$f")
	;;
	'>')
		m4=$(printf "${crdate}%-11s ${cfr2}%-10s${cre}%2s ${cdate}%-11s ${cfrom}%-10s ${csub2}%s ${cfile}%s" "$date" "$surname1" "$re" "$refdate" "$surname2" "$subject1" "$f")
	;;
	'<')
		m4=$(printf "${cdate}%-11s ${cfrom}%-10s   ${crdate}%-11s ${cfr2}%-10s ${csub}%s ${cre}%-2s${cto}%s ${cfile}%s" "$date" "$surname1" "$refdate" "$surname2" "$subject1" ">" "${to[*]}" "$f")
	;;
	*)
		m4=$(printf "${cdate}%-11s ${cfrom}%-10s${cre}%2s ${crdate}%-11s ${cfr2}%-10s ${csub}%s ${cto}%s ${cfile}%s" "$date" "$surname1" "$re" "$refdate" "$surname2" "$subject1" "${to[*]}" "$f")
	;;
	esac

	echo -e "$m1" # All.
	echo -e "$m4" >> db-4 # Same as Msg3 but also no Subject2.

	. ${bin}/show-progress

done <&6 >&7

exec 6<&-
exec 7>&-

echo
echo -e "${cfile}db${c0}"
echo
head -n 20 db

echo
echo -e "${cfile}db-4${c0}"
echo
cat db-4
