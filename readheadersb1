#!/bin/bash

. "${HOME}/bin/general_header"

suffix=".m"

input=
output=mail1
log=log1

continue=
messagecount=
f=
linecount=
name=
value=

wname=14								# width of name column in mail output file.

quot=\"

function reset_vars {

	name=
	value=

	linecount=
	section=
	charset=
	description=

	state=

	continue=yes
}

function id {
	echo -e "$ColourOn${Yellow}mFunction:" "$ColourOn${BrightGreen}m$thisfile"
}

function dumpvars {

	printval "Input:" "$input"
	printval "Output:" "$output"
	printval "Continue:" "$continue"
	printval "State:" "$state"
	printval "Messagecount:" "$messagecount"
	printval "File:" "$f"
	printval "Section:" "$section"
	printval "Name:" "$name"
	printval "Value:" "$value"
	printval "Charset:" "$charset"
	printval "Description:" "$description"
}

function setup_charcodes {
	local thisfile1="$thisfile"
	thisfile=setup_charcodes
	[[ ${debug[${thisfile}]} ]] && id

         charcodea[ascii]=ascii	; chardesc[ascii]="ASCII"	;
       charcodea[usascii]=ascii
charcodea[printableascii]=ascii	;
          charcodea[utf7]=utf7	; chardesc[utf7]="Unicode"	;
          charcodea[utf8]=utf8	; chardesc[utf8]="Unicode"	;
         charcodea[utf16]=utf16	; chardesc[utf16]="Unicode"	;
       charcodea[utf16be]=utf16be; chardesc[utf16be]="Unicode"	;
       charcodea[utf16le]=utf16le; chardesc[utf16le]="Unicode"	;
       charcodea[unicode]=unicode; chardesc[unicode]="Unicode"	;
       charcodea[so88591]=88591	; chardesc[88591]="Western"	;	# this one is to catch an anomaly seen in the input
      charcodea[iso88591]=88591	; chardesc[88591]="Western"	;
      charcodea[iso88592]=88592	; chardesc[88592]="Central"	;
      charcodea[iso88593]=88593	; chardesc[88593]="Turkish"	;
      charcodea[iso88594]=88594	; chardesc[88594]="Baltic"	;
      charcodea[iso88595]=88595	; chardesc[88595]="Cryllic"	;
      charcodea[iso88596]=88596	; chardesc[88596]="Arabic"	;
      charcodea[iso88597]=88597	; chardesc[88597]="Greek"	;
      charcodea[iso88598]=88598	; chardesc[88598]="Hebrew"	;
      charcodea[iso88599]=88599	; chardesc[88599]="Turkish"	;
     charcodea[iso885910]=885910; chardesc[885910]="Nordic"	;
     charcodea[iso885911]=885911; chardesc[885911]="Thai"	;
     charcodea[iso885912]=885912; chardesc[885912]="Devengari"	;
     charcodea[iso885913]=885913; chardesc[885913]="Baltic"	;
     charcodea[iso885914]=885914; chardesc[885914]="Celtic"	;
     charcodea[iso885915]=885915; chardesc[885915]="Western"	;
     charcodea[iso885916]=885916; chardesc[885916]="Southern"	;
    charcodea[windows874]=874	; chardesc[874]="Thai"	;
   charcodea[windows1200]=1200
   charcodea[windows1250]=1250	; chardesc[1250]="European"	;
   charcodea[windows1251]=1251	; chardesc[1251]="Cryllic"	;
   charcodea[windows1252]=1252	; chardesc[1252]="Western"	;
   charcodea[windows1253]=1253	; chardesc[1253]="Greek"	;
   charcodea[windows1254]=1254	; chardesc[1254]="Turkish"	;
   charcodea[windows1255]=1255	; chardesc[1255]="Hebrew"	;
   charcodea[windows1256]=1256	; chardesc[1256]="Arabic"	;
   charcodea[windows1257]=1257	; chardesc[1257]="Baltic"	;
   charcodea[windows1258]=1258	; chardesc[1258]="Vietnam"	;
          charcodea[big5]=big5	; chardesc[big5]="Taiwan"	;
         charcodea[euckr]=euckr	; chardesc[eukcr]="Korean"	;
         charcodea[eucjp]=eucjp	; chardesc[eukjp]="Japanese"	;
        charcodea[gb2312]=2312	; chardesc[2312]="Chinese"	;
      charcodea[hzgb2312]=2312
      charcodea[iso2022cn]=2022cn ; chardesc[2022cn]="Chinese"	;
     charcodea[iso2022kr]=2022kr; chardesc[2022kr]="Korean"	;
     charcodea[iso2022jp]=2022jp; chardesc[2022jp]="Japanese"	;
         charcodea[koi8r]=koi8r	; chardesc[koi8r]="Cryllic"	;
         charcodea[koi8u]=koi8u	; chardesc[koi8u]="Ukrainian"	;
				  chardesc[unknown]='-'

	thisfile="$thisfile1"
}

function close_section {
	exec 7>&-								# Close old file (if any)
	if [[ "$output" ]] ; then
		case "$charcode" in
		""|"unknown"|"utf8"|"unicode"|"ascii"|"1200")
			mv "$output" "${output}.u"
		;;
		*)
			iconv -f "$charset" "$output" > "${output}.u"	# Convert old file unless it is the header.
			if [ $? != 0 ] ; then
				echo iconv error "$output $charset">&8
			fi
		;;
		esac
	fi
}

function open_section {
	(( section++ ))
	output="${messagecount}-${section}-${charset}."
	exec 7>"$output"
	echo ":::MAILFILE::: $messagecount $section $charset $description $f" >&7
	printf "%5s %s %-20s %-20s %s\n" "$messagecount" "$section" "$charset" "$description" "$f" >&8
}

function parse { # separate name from value using specified character, and also remove all occurances of up to two other characters.
	pchr="$1"
	line="_$value"
	name=$(echo "${line:1}" | sed 's/:'"$pchr/$pchr"'\x01/ ; s/\x01.*//')
	value=$(echo "${line:1}" | sed 's/'"$pchr"'/\x01/ ; s/.*\x01[[:space:]]*// ; s/'"$2"'//g ; s/'"$3"'//g')
	if [ "x$name" = "x$value" ] ; then
		name=
	fi
}

function write_messageline {
	printf "%-${wname}s %s\n" "$name" "$value" >&7
}

function process_line {
	parse ':'
	write_messageline
	case "${name,,*}" in
	"from:"
	"to:"
	"subject:"
	"date:"|"sent:"
	'content-type:')					# Header is Content-Type:
		continue=				# Hopefully, this should cause us to go to the next e-mail file.
	;;
	*)
		:
	;;
	esac
}

function readlines {
	reset_vars
	while read linein ; do
		value="$linein"
		a=( $value ) # only for purposes of detecting a blank line
		if [ ${#a} != 0 ] ; then
			process_line
		fi
		[[ $continue ]] || break
	done
}

function readfiles {
	while read f ; do
		hc=4
		exec 3<"$f"
		readlines <&3
		progress
	done
}

function main {
	m.readmail "$suffix"
	input=mailfiles
	start 					# sets up exec 6<"$input" and progress meter
	readfiles <&6
	echo >&2				# Tidy up after progress meter.
}

exec 8>"$log"
exec 7>"$output"

main

