#!/bin/bash

tagv[1]='Picasa'
chkv[1]='P'
tagv[2]='CurrentIPTCDigest'
chkv[2]='D'
tagv[3]='ImageUniqueID'
chkv[3]='I'
tagv[4]='Keywords'
chkv[4]='K'
tag[1]='ExifByteOrder'
str[1]='Little'
chk[1]='L'
tagz[1]='UserComment'
chkz[1]="U"

function askresponse {
	echo "${1}"
	echo '<Enter> to continue or,'
	echo 'type an answer, or'
	echo '<y> for yes.'
	printf '%s' '?'
	read response
	echo "$response"
}

#############################################################################
function print-call {
	echo #############################################################################
	echo
	echo $1 $2
	echo
	echo "Enter any text to do this task, or"
	printf '%s' 'Press <Enter> to skip:'
	read response
	[[ $response ]] && $1 $2
}
#############################################################################
function get-tags {
	for i in *.jpg ; do
		exiftool -G -H -s -e "$i" > "${i}.tags"
#		lines=$(wc -l "${i}.tags" | sed 's/^\([^ ]*\).*/\1/')
#		printf '%5d EXIF tag lines in %s\n' "$lines" "${i}.tags"
		printf '%s' '.'
	done
	echo
}
#############################################################################
function get-pics {
	for i in *.jpg ; do
		exiftool -m -o "$i".pic -All= "$i"
#		printf '%10d %s %60s   ' $(stat --format='%s' "$i".pic) 'bytes:' "$i".pic
		printf '%s' '.'
	done
	echo
}
#############################################################################
function get-sums {
	echo 'MD5 sums for: '\'$1\'
	for i in *$1 ; do
		sum=$(md5sum "$i")
#		echo "$sum" >&2
		printf '%s' '.' >&2
		echo "$sum"
	done > ${1}sums
	echo
}
#############################################################################
function get-dups {
	echo 'Duplicate sums for : '\'$1\'
	if ! [ -e ${1}sums ] ; then
		get-sums $1
	fi
	cat ${1}sums | sort | uniq -w 32 --all-repeated=separate > ${1}dups
	echo '-----------------------------------------------------------------------------'
	echo
	echo ${1}dups
	echo
	cat ${1}dups
}
#############################################################################
function get-list {
	if ! [ -e ${1}dups ] ; then
		get-dups $1
	fi
	while read line ; do
		a=($line)
		sum=${a[0]}
		filename=$( echo "$line" | sed 's/^[^ ]* *\(.*\)\.pic/\1/')
		case $sum in
			$sumb)
				echo "$filenameb" >> "$sumb".files
			;;
			'')
				echo "$filenameb" >> "$sumb".files
				echo '-----------------------------------------------------------------------------' >&2
				echo >&2
				echo "$sumb".files >&2
				echo >&2
				cat -n "$sumb".files >&2
				echo >&2
				echo "$sumb"
			;;
			*)
				if [ -e "$sum".files ] ;then
					rm "$sum".files
				fi
				count=
			;;
		esac
		sumb="$sum"
		filenameb="$filename"
	done < ${1}dups > ${1}list
	echo "$filenameb" >> "$sumb".files
	echo '-----------------------------------------------------------------------------'
	echo
	echo "$sumb".files
	echo
	cat -n "$sumb".files
	echo
	echo "$sumb" >> ${1}list
}
#############################################################################
function gen_chk_key {
	hd=
	hl=
	for (( i = 1 ; i <= ${#tagv[*]} ; i++ )) ; do
		hd="$hd${chkv[$i]}"
		hl="${hl}-"
		echo "${chkv[$i]} ${tagv[$i]}" >> chk.key
	done
	for (( i = 1 ; i <= ${#tag[*]} ; i++ )) ; do
		hd="$hd${chk[$i]}"
		hl="${hl}-"
		echo "${chk[$i]} ${tag[$i]} ${str[$i]}" >> chk.key
	done
	for (( i = 1 ; i <= ${#tagz[*]} ; i++ )) ; do
		hd="$hd${chkz[$i]}"
		hl="${hl}-"
		echo "${chkz[$i]} ${tagz[$i]}" >> chk.key
	done
	echo >> chk.key
	echo $hd >> chk.key
	echo $hl >> chk.key
}
#############################################################################
function check-tags {
	res=
	dot='.'
	for (( i = 1 ; i <= ${#tagv[*]} ; i++ )) ; do
		if [ $(grep "${tagv[$i]}" "${file}.tags" | wc -l) != 0 ] ; then
			res="$res${chkv[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tag[*]} ; i++ )) ; do
		if [ $(grep "${tag[$i]}" "${file}.tags" | grep "${str[$i]}" | wc -l) != 0 ] ; then
			res="$res${chk[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tagz[*]} ; i++ )) ; do
		if [ "x$(grep "${tagz[$i]}" "${file}.tags" | sed 's/. [^ ]* [^ ]* *[^ ]* *: \?\(.*\)/\1/')" != 'x' ] ; then
			res="$res${chkz[$i]}"
		else
			res="$res$dot"
		fi
	done
	echo "$res" "$file"
}
#############################################################################
function get-chk {
	! [[ -e "${1}list" ]] && get-list ${1}
	while read sum ; do
		[[ -e ${sum}.chk.tmp ]] && rm ${sum}.chk.tmp
		while read file ; do
			(( filecount++ ))
			check-tags "${file}" >> ${sum}.chk.tmp
		done < ${sum}.files
		cat ${sum}.chk.tmp | sort | uniq > ${sum}.chk
		rm ${sum}.chk.tmp
		echo '-----------------------------------------------------------------------------'
		echo
		echo "$sum".chk
		echo
		cat -n "$sum".chk
		echo
	done < ${1}list
}
#############################################################################
function get-diffs {
	while read sum ; do
		if ! [[ -e ${sum}.chk ]] ; then
			echo "No list of duplicates found for ${sum}"
			echo "Try running get-dups <filetype>"
		fi
		count=
		while read line ; do
			filename=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
			[[ $count ]] && diff "$filenameb".tags "$filename".tags | cull-diff > "$filenameb".diff
			(( count++ ))
			filenameb="$filename"
		done < ${sum}.chk
		echo diffs generated for "$sum".chk
	done < ${1}list
}
#############################################################################
function remove-samevals {
	echo > "$prev".diff.diffvals
	count=
	unset fl
	valp=impossiblevaluetomatch
	while read line ; do
		(( count++ ))
		(( countp = $count - 1 ))
		val=$(echo "$line)" | sed 's/[<>] [^ ]* *[^ ]* *[^ ]* *: \?\(.*\)/\1/')
		if [ "x$val" = "x$valp" ] ; then
			fl[$countp]=delete
			fl[$count]=delete
		fi
		valp="$val"
	done < "$prev".diff.bykey
	count=
	while read line ; do
		(( count++ ))
		if [ "x${fl[$count]}" = "x" ] ; then
			echo "$line" >> "$prev".diff.diffvals
		fi
	done < "$prev".diff.bykey
}
#############################################################################
function remove-samekeys {
	echo > "$prev".diff.diffkeys
	count=
	unset fl
	keyp=impossiblevaluetomatch
	while read line ; do
		(( count++ ))
		(( countp = $count - 1 ))
		a=($line)
		key="${a[3]}"
		if [ "x$key" = "x$keyp" ] ; then
			fl[$count]=delete
			fl[$countp]=delete
		fi
		keyp="$key"
	done < "$prev".diff.diffvals
	count=
	while read line ; do
		(( count++ ))
		if [ "x${fl[$count]}" = "x" ] ; then
			echo "$line" >> "$prev".diff.diffkeys
		fi
	done < "$prev".diff.diffvals
}
#############################################################################
function analyze-diffs {
	prev="$1"
#	if ! [ -e "$prev".diff.bykey ] ; then
		cat "${prev}.diff" | sort -k4,4 -k3,3 -k1,1 > "${prev}.diff.bykey"
		cat "${prev}.diff.bykey" | uniq -f 5 --all-repeated=separate > "${prev}.diff.samevals"
		remove-samevals
		cat "${prev}.diff.diffvals" | uniq -f 3 -w 15 --all-repeated=separate > "${prev}.diff.samekeys"
		remove-samekeys
#	fi
	echo '-----------------------------------------------------------------------------'
	if [[ "x$(wc -l "${prev}.diff.samevals")" > "x1" ]] ; then
		echo
		echo MOVED
		echo $filecountp
		cat "${prev}.diff.samevals" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.samevals" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	if [[ "x$(wc -l "${prev}.diff.samekeys")" > "x1" ]] ; then
		echo
		echo CHANGED
		echo $filecountp
		cat "${prev}.diff.samekeys" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.samekeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	if [[ "x$(wc -l "${prev}.diff.diffkeys")" > "x1" ]] ; then
		echo
		echo ADDED/DELETED
		echo $filecountp
		cat "${prev}.diff.diffkeys" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.diffkeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	echo
	echo BY TAG
	cat "${prev}.diff.bykey" | grep -E "(^>)|(^)" --color=auto
	echo
	echo BY FILE
	echo $filecountp
	cat "${prev}.diff.bykey" | grep -E "(^<)"
	echo $filecount | grep -E "(.)" --color=auto
	cat "${prev}.diff.bykey" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	echo
	cat -n "$sum".chk | grep -E '(^ *'$filecount')|(^)' --color=auto
	echo
}
#############################################################################
function show-diffs {
	! [[ -e "${1}list" ]] && get-list ${1}
	[[ "x$(stat --format='%s' ${1}list)" = "x0" ]] && echo "No duplicate ${1} files found." && exit 1
	while read sum ; do
		prev=
		file=
		filecount=
		! [[ -e ${sum}.chk ]] && get-chk ${1}
		while read line ; do
			a=($line)
			file=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
			(( filecount++ ))
			(( filecountp = filecount - 1 ))
			[[ "$prev" ]] && analyze-diffs "$prev"
			prev="$file"
		done < "${sum}.chk"
	done < "${1}list"
}
show-command tag_analysis
#print-call get-tags
#print-call get-pics
#print-call get-sums pic
#get-dups pic
#get-list pic
#gen_chk_key
#print-call get-chk pic
#print-call get-diffs pic
show-diffs pic
