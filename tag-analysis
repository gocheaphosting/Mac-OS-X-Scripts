#!/bin/bash

LC_COLLATE="C"
export LC_COLLATE

tagv[1]='Picasa'
chkv[1]='P'
tagv[2]='CurrentIPTCDigest'
chkv[2]='D'
tagv[3]='ImageUniqueID'
chkv[3]='I'
tagv[4]='Keywords'
chkv[4]='K'
tag[1]='ExifByteOrder'
str[1]='Little'
chk[1]='L'
tagz[1]='UserComment'
chkz[1]="U"

declare -a filenames

file=
filecount=
filecountp=
prev=
regen_sums=
sum=

#############################################################################
function _askresponse {
	echo "${1}"
	echo '<Enter> to continue or,'
	echo 'type an answer, or'
	echo '<y> for yes.'
	printf '%s' '?'
	read response
	echo "$response"
}
#############################################################################
function _print-call {
	echo '.............................................................................'
	echo
	echo $1 $2
	echo
#	echo "Enter any text to do this task, or"
#	printf '%s' 'Press <Enter> to skip:'
#	read response
#	[[ $response ]] && $1 $2
	$1 $2
}
#############################################################################
function _get-tags {
	for i in *.jpg ; do
		if [[ $(_check-dates "$i" "$i".tags) ]] ; then
			exiftool -G -H -s -e "$i" > "$i".tags
			lines=$(wc -l "$i".tags | sed 's/^\([^ ]*\).*/\1/')
			printf '%5d EXIF tag lines in %s\n' "$lines" "$i".tags
		fi
	done
	echo
}
#############################################################################
function _get-pics {
	for i in *.jpg ; do
		if [[ $(_check-dates "$i" "${i}".pic) ]] ; then
			exiftool -m -o "$i".pic -All= "$i"
			printf '%10d %s %60s   ' $(stat --format='%s' "$i".pic) 'bytes:' "$i".pic
			regen_sums=1
		fi
	done
	echo
}
#############################################################################
function _get-sums {
	if [[ $regen_sums ]] ; then
		echo 'MD5 sums for: '\'$1\'
		for i in *$1 ; do
			sum=$(md5sum "$i")
			echo "$sum" >&2
			printf '%s' '.' >&2
			echo "$sum"
		done > ${1}sums
	fi
	echo
}
#############################################################################
function _get-dups {
	if ! [ -e ${1}sums ] ; then
		_get-sums $1
	fi
	if [[ $(_check-dates ${1}sums ${1}dups) ]] ; then
		cat ${1}sums | sort | uniq -w 32 --all-repeated=separate > ${1}dups
		echo '-----------------------------------------------------------------------------'
		echo
		echo ${1}dups
		echo
		cat ${1}dups
	fi
}
#############################################################################
function _get-list {
	if ! [ -e ${1}dups ] ; then
		_get-dups $1
	fi
	if [[ $(_check-dates ${1}dups ${1}list) ]] ; then
		while read line ; do
			a=($line)
			sum=${a[0]}
			filename=$( echo "$line" | sed 's/^[^ ]* *\(.*\)\.pic/\1/')
			case $sum in
				$sumb)
					echo "$filenameb" >> "$sumb".files
				;;
				'')
					echo "$filenameb" >> "$sumb".files
					echo '-----------------------------------------------------------------------------' >&2
					echo >&2
					echo "$sumb".files >&2
					echo >&2
					cat -n "$sumb".files >&2
					echo >&2
					echo "$sumb"
				;;
				*)
					if [ -e "$sum".files ] ;then
						rm "$sum".files
					fi
					count=
				;;
			esac
			sumb="$sum"
			filenameb="$filename"
		done < ${1}dups > ${1}list
		echo "$filenameb" >> "$sumb".files
		echo '-----------------------------------------------------------------------------'
		echo
		echo "$sumb".files
		echo
		cat -n "$sumb".files
		echo
		echo "$sumb" >> ${1}list
	fi
}
#############################################################################
function _gen_chk_key {
	hd=
	hl=
	for (( i = 1 ; i <= ${#tagv[*]} ; i++ )) ; do
		hd="$hd${chkv[$i]}"
		hl="${hl}-"
		echo "${chkv[$i]} ${tagv[$i]}" >> chk.key
	done
	for (( i = 1 ; i <= ${#tag[*]} ; i++ )) ; do
		hd="$hd${chk[$i]}"
		hl="${hl}-"
		echo "${chk[$i]} ${tag[$i]} ${str[$i]}" >> chk.key
	done
	for (( i = 1 ; i <= ${#tagz[*]} ; i++ )) ; do
		hd="$hd${chkz[$i]}"
		hl="${hl}-"
		echo "${chkz[$i]} ${tagz[$i]}" >> chk.key
	done
	echo >> chk.key
	echo $hd >> chk.key
	echo $hl >> chk.key
}
#############################################################################
function _check-tags {
	res=
	dot='.'
	term='z'
	for (( i = 1 ; i <= ${#tagv[*]} ; i++ )) ; do
		if [ $(grep "${tagv[$i]}" "${file}.tags" | wc -l) != 0 ] ; then
			res="$res${chkv[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tag[*]} ; i++ )) ; do
		if [ $(grep "${tag[$i]}" "${file}.tags" | grep "${str[$i]}" | wc -l) != 0 ] ; then
			res="$res${chk[$i]}"
		else
			res="$res$dot"
		fi
	done
	for (( i = 1 ; i <= ${#tagz[*]} ; i++ )) ; do
		if [ "x$(grep "${tagz[$i]}" "${file}.tags" | sed 's/. [^ ]* [^ ]* *[^ ]* *: \?\(.*\)/\1/')" != 'x' ] ; then
			res="$res${chkz[$i]}"
		else
			res="$res$dot"
		fi
	done
	res="$res$term"
	echo "$res" "$file"
}
#############################################################################
function _get-chk {
	! [[ -e "${1}list" ]] && _get-list ${1}
	while read sum ; do
		if [[ $(_check-dates ${sum}.files ${sum}.chk) ]] ; then
			[[ -e ${sum}.chk.tmp ]] && rm ${sum}.chk.tmp
			while read file ; do
				(( filecount++ ))
				_check-tags "${file}" >> ${sum}.chk.tmp
			done < ${sum}.files
			cat ${sum}.chk.tmp | sort | uniq > ${sum}.chk
			rm ${sum}.chk.tmp
			echo '-----------------------------------------------------------------------------'
			echo
			echo "$sum".chk
			echo
			cat -n "$sum".chk
			echo
		fi
	done < ${1}list
}
#############################################################################
function _cull-diff {
	grep -Ev "(^---)|(^[,0-9]*[acd][0-9])|(FilePermissions)|(Offset)"
}
#############################################################################
function _get-diffs {
	while read sum ; do
		if ! [[ -e ${sum}.chk ]] ; then
			echo "No list of duplicates found for ${sum}"
			echo "Try running get-dups <filetype>"
		fi
		count=
		while read line ; do
			filename=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
			if [ "x$count" != "x" ] ; then
					res1=$(_check-dates "$filenameb".tags "$filenameb".diff)
					res2=$(_check-dates "$filename".tags "$filenameb".diff)
					if [ "x$res1" = "x" ] ; then
						if [ "x$res2" != "x" ] ; then
							diff "$filenameb".tags "$filename".tags | _cull-diff > "$filenameb".diff
							echo "diff generated: $sum $filenameb".diff
						fi
					else
						diff "$filenameb".tags "$filename".tags | _cull-diff > "$filenameb".diff
						echo "diff generated: $sum $filenameb".diff
					fi
			fi
			(( count++ ))
			filenameb="$filename"
		done < ${sum}.chk
	done < ${1}list
}
#############################################################################
function _remove-samevals {
	if [[ $(_check-dates "$prev".diff.diffvals "$prev".diff.bykey) ]] ; then
		echo > "$prev".diff.diffvals
		count=
		unset fl
		valp=impossiblevaluetomatch
		while read line ; do
			(( count++ ))
			(( countp = $count - 1 ))
			val=$(echo "$line)" | sed 's/[<>] [^ ]* *[^ ]* *[^ ]* *: \?\(.*\)/\1/')
			if [ "x$val" = "x$valp" ] ; then
				fl[$countp]=delete
				fl[$count]=delete
			fi
			valp="$val"
		done < "$prev".diff.bykey
		count=
		while read line ; do
			(( count++ ))
			if [ "x${fl[$count]}" = "x" ] ; then
				echo "$line" >> "$prev".diff.diffvals
			fi
		done < "$prev".diff.bykey
	fi
}
#############################################################################
function _remove-samekeys {
	if [[ $(_check-dates "$prev".diff.diffkeys "$prev".diff.diffvals) ]] ; then
		echo > "$prev".diff.diffkeys
		count=
		unset fl
		keyp=impossiblevaluetomatch
		while read line ; do
			(( count++ ))
			(( countp = $count - 1 ))
			a=($line)
			key="${a[3]}"
			if [ "x$key" = "x$keyp" ] ; then
				fl[$count]=delete
				fl[$countp]=delete
			fi
			keyp="$key"
		done < "$prev".diff.diffvals
		count=
		while read line ; do
			(( count++ ))
			if [ "x${fl[$count]}" = "x" ] ; then
				echo "$line" >> "$prev".diff.diffkeys
			fi
		done < "$prev".diff.diffvals
	fi
}
#############################################################################
function _check-dates {
	result=
	! [[ -e "$1" ]] || ! [[ -e "$2" ]] || [[ $(date -r "$1" +'%Y%m%d_%H%M%S') > $(date -r "$2" +'%Y%m%d_%H%M%S') ]] && result=1
	echo "$result"
}
#############################################################################
function _print-diff {
	echo
	echo '.............................................................................'
	echo
	cat -n "$sum".chk | grep -E '(^ *'$filecount')|(^)' --color=auto
	echo
	! [[ -e "$prev".diff ]] && _get-diffs
	if [[ $(_check-dates "${prev}.diff" "${prev}.diff.bykey") ]] ; then
		cat "${prev}.diff" | sort -k4,4 -k3,3 -k1,1 > "${prev}.diff.bykey"
		cat "${prev}.diff.bykey" | uniq -f 5 --all-repeated=separate > "${prev}.diff.samevals"
		_remove-samevals
		cat "${prev}.diff.diffvals" | uniq -f 3 -w 15 --all-repeated=separate > "${prev}.diff.samekeys"
		_remove-samekeys
	fi
	if [[ "x$(wc -l "${prev}.diff.samevals")" > "x1" ]] ; then
		echo
		echo MOVED
		echo $filecountp
		cat "${prev}.diff.samevals" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.samevals" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	if [[ "x$(wc -l "${prev}.diff.samekeys")" > "x1" ]] ; then
		echo
		echo CHANGED
		echo $filecountp
		cat "${prev}.diff.samekeys" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.samekeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	if [[ "x$(wc -l "${prev}.diff.diffkeys")" > "x1" ]] ; then
		echo
		echo ADDED/DELETED
		echo $filecountp
		cat "${prev}.diff.diffkeys" | grep -E "(^<)"
		echo $filecount | grep -E "(.)" --color=auto
		cat "${prev}.diff.diffkeys" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	fi
	echo
	echo BY TAG
	cat "${prev}.diff.bykey" | grep -E "(^>)|(^)" --color=auto
	echo
	echo BY FILE
	echo $filecountp
	cat "${prev}.diff.bykey" | grep -E "(^<)"
	echo $filecount | grep -E "(.)" --color=auto
	cat "${prev}.diff.bykey" | grep -E "(^>)" --color=auto | grep -E "(>)|(\[)|(\])|( [-:])|( 0x)" --color=auto
	echo
	cat -n "$sum".chk | grep -E '(^ *'$filecount')|(^)' --color=auto
	echo
}
#############################################################################
function _ask-delete {
	_print-diffs
	i=$(exec prompt-delete "${filenames[@]}")
	echo ">${i}<"
	exit
	while [ "x$i" != "x" ] ; do
		f="${filenames[${i}]}"
		if [ -e "$f" ] ; then
			ls -l "$f"*
			echo 'Delete these files?'
			echo '<y> for yes, or'
			echo '<Enter> for no.'
			printf '%s' '?'
			read
			[[ "x$ans" = "xy" ]] && rm "$f"*
		else
			echo 'ERROR: I can not find '"$f"'!'
		fi
		_print-diffs
		i=$(exec prompt-delete "${filenames[@]}")
	done
}
#############################################################################
function _print-diffs {
	prev=
	filecount=
	unset filenames
	echo
	echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
	echo
	while read line ; do
		file=$(echo "$line" | sed 's/^[^ ]* *\(.*\)/\1/')
		(( filecount++ ))
		(( filecountp = filecount - 1 ))
		filenames[$filecount]="$file"
		[[ "$prev" ]] && _print-diff
		prev="$file"
	done < "${sum}.chk"
}
#############################################################################
function _analyze-diffs {
	! [[ -e "${1}list" ]] && _get-list $1
	[[ "x$(stat --format='%s' ${1}list)" = "x0" ]] && echo "No duplicate ${1} files found." && exit 1
	while read sum ; do
		! [[ -e ${sum}.chk ]] && _get-chk $1
		_ask-delete
	done < "${1}list"
}
show-command tag-analysis
_print-call _get-tags
_print-call _get-pics
_print-call _get-sums pic
_print-call _get-dups pic
_print-call _get-list pic
_print-call _gen_chk_key
_print-call _get-chk pic
_print-call _get-diffs pic
_print-call _analyze-diffs pic
